/**
 * Returns the current version of the project.
 * @returns {string} The current version.
 */
function getVersion() {
    return "3.0.0";
}

/**
 * Calculates a security level based on the SHA-256 hash of the password.
 * @param {string} pass - The password input.
 * @returns {Promise<number>} The calculated security level.
 */
async function getSecLevel(pass) {
    const passBytes = encodeUTF8(pass);
    const hash = await hashData(passBytes, 'SHA-256');
    let securitySum = 0;

    for (const byte of hash) {
        const highNibble = (byte >> 4) & 0xF;
        const lowNibble = byte & 0xF;

        [highNibble, lowNibble].forEach(nibble => {
            if (nibble >= 0 && nibble <= 3) {
                securitySum += 4;
            } else if (nibble >= 4 && nibble <= 7) {
                securitySum += 3;
            } else if (nibble >= 9 && nibble <= 12) {
                securitySum += 2;
            } else if (nibble >= 13 && nibble <= 15) {
                securitySum += 1;
            }
        });
    }

    return 420 + securitySum;
}

/**
 * Repeatedly hashes the seed using a combination of hash algorithms and custom salts.
 * @param {Uint8Array} seed - The seed binary data to hash.
 * @returns {Promise<Uint8Array>} The final hashed key as binary.
 */
async function returnHash(seed) {
    let key = seed;
    const pastHashes = [];

    // Initialize past hashes with initial values using custom salts
    const salts = [
        "RXmYwGwm4Td9nVIpmA9NFI5wcoz9HO6X",
        "jYcXFLIgZSKOW5RD1N8GStcrQilZ7ezE",
        "QXpJWihh5j4wb8pJiD2JLN6ziBu6oLXq"
    ];

    for (const salt of salts) {
        const combined = concatUint8Arrays(key, encodeUTF8(salt));
        const hashed = await hashData(combined, 'SHA-512');
        pastHashes.push(hashed);
    }

    // Extract nibbles from the seed for processing
    const nibbles = [];
    for (const byte of seed) {
        nibbles.push((byte >> 4) & 0xF);
        nibbles.push(byte & 0xF);
    }

    for (const nibble of nibbles) {
        let hashInput;

        switch (nibble) {
            case 0:
                hashInput = concatUint8Arrays(key, encodeUTF8("SF39"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-384');
                break;
            case 1:
                hashInput = concatUint8Arrays(key, encodeUTF8("DS44"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-384');
                break;
            case 2:
                hashInput = concatUint8Arrays(key, encodeUTF8("XL55"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-384');
                break;
            case 3:
                hashInput = concatUint8Arrays(key, encodeUTF8("NC01"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-384');
                break;
            case 4:
                hashInput = concatUint8Arrays(key, encodeUTF8("LU50"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-512');
                break;
            case 5:
                hashInput = concatUint8Arrays(key, encodeUTF8("GL12"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-512');
                break;
            case 6:
                hashInput = concatUint8Arrays(key, encodeUTF8("GG31"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-512');
                break;
            case 7:
                hashInput = concatUint8Arrays(key, encodeUTF8("HL11"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-512');
                break;
            case 8:
                hashInput = concatUint8Arrays(key, encodeUTF8("XF91"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-256');
                break;
            case 9:
                hashInput = concatUint8Arrays(key, encodeUTF8("BM15"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-256');
                break;
            case 10:
                hashInput = concatUint8Arrays(key, encodeUTF8("TT85"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-256');
                break;
            case 11:
                hashInput = concatUint8Arrays(key, encodeUTF8("RF19"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-1');
                break;
            case 12:
                hashInput = concatUint8Arrays(key, encodeUTF8("MS25"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-1');
                break;
            case 13:
                hashInput = concatUint8Arrays(key, encodeUTF8("0X80"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-1');
                break;
            case 14:
                hashInput = concatUint8Arrays(key, encodeUTF8("MX55"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-1');
                break;
            case 15:
                hashInput = concatUint8Arrays(key, encodeUTF8("WT66"), pastHashes[0], pastHashes[1]);
                key = await hashData(hashInput, 'SHA-256');
                break;
        }

        // Update pastHashes with the new key
        pastHashes.push(key);
        pastHashes.shift();
    }

    return key;
}

/**
 * Generates a set of keys based on the input password using various hash algorithms.
 * @param {string} pass - The password input.
 * @returns {Promise<{ aesKey1: Uint8Array, aesKey2: Uint8Array, xorKey: Uint8Array }>} An object containing AES-GCM key, AES-CTR key, and XOR key as 256-bit Uint8Arrays.
 */
async function getPassword(pass) {
    // Default keys when password is empty
    if (pass === "") {
        const defaultKeys = {
            aesKey1: await generate256BitKey(encodeUTF8("I'm looking for friends :)")),
            aesKey2: await generate256BitKey(encodeUTF8("Do you wanna be my friend?")),
            xorKey: await generate256BitKey(encodeUTF8("You are a kind stranger."))
        };
        return defaultKeys;
    }

    console.log("Started Calculating Password Hash.");

    // Step 1: Generate seedHash by concatenating multiple hashes of the password
    const passBytes = encodeUTF8(pass);
    const hashes = await Promise.all([
        hashData(passBytes, 'SHA-512'),
        hashData(passBytes, 'SHA-256'),
        hashData(passBytes, 'SHA-1'),
        hashData(passBytes, 'SHA-384'),
    ]);
    const seedHash = concatUint8Arrays(...hashes);

    // Step 2: Generate initial hashPass using returnHash
    let hashPass = await returnHash(new Uint8Array(seedHash));

    // Step 3: Determine security level
    const securityLevel = await getSecLevel(pass);

    // Step 4: Iterate hashPass based on security level
    for (let i = 0; i < securityLevel; i++) {
        const iterationInput = concatUint8Arrays(
            hashPass,
            new Uint8Array([
                (i * 69) & 0xFF,
                (i * 69 >> 8) & 0xFF,
                (i * 69 >> 16) & 0xFF,
                (i * 69 >> 24) & 0xFF
            ])
        );
        hashPass = await returnHash(iterationInput);
    }

    // Step 5: Generate AES-GCM key
    const aesKey1 = await generate256BitKey(hashPass);

    // Step 6: Generate AES-CTR key by iterating 15 times
    for (let i = 0; i < 15; i++) {
        const iterationInput = concatUint8Arrays(
            hashPass,
            new Uint8Array([
                (i * 420) & 0xFF,
                (i * 420 >> 8) & 0xFF,
                (i * 420 >> 16) & 0xFF,
                (i * 420 >> 24) & 0xFF
            ])
        );
        hashPass = await returnHash(iterationInput);
    }
    const aesKey2 = await generate256BitKey(hashPass);

    // Step 7: Generate XOR key by iterating 15 times
    for (let i = 0; i < 15; i++) {
        const iterationInput = concatUint8Arrays(
            hashPass,
            new Uint8Array([
                (i * 99) & 0xFF,
                (i * 99 >> 8) & 0xFF,
                (i * 99 >> 16) & 0xFF,
                (i * 99 >> 24) & 0xFF
            ])
        );
        hashPass = await returnHash(iterationInput);
    }
    const xorKeySalts = await generate64Salts("Today is not the day I learned to code.");

    const xorKey = await generate4kByteKey(hashPass, xorKeySalts);

    return { aesKey1, aesKey2, xorKey };
}

/**
 * Encrypts a message using AES-256-GCM, AES-256-CTR, and XOR encryption, then converts it to emojis.
 * @param {string} message - The message to encrypt.
 * @param {object} keys - An object containing aesKey1, aesKey2, and xorKey as Uint8Arrays.
 * @returns {Promise<string>} The encrypted message represented as emojis.
 */
async function encrypt(message, keys) {

    if (!keys || !(keys.aesKey1 instanceof Uint8Array) || !(keys.aesKey2 instanceof Uint8Array) || !(keys.xorKey instanceof Uint8Array)) {
        throw new Error("Invalid keys provided.");
    }

    // Step 1: AES-256-GCM Encryption
    const messageBytes = encodeUTF8(message);
    const aesGcmEncrypted = await aesGcmEncrypt(keys.aesKey1, messageBytes);

    // Step 2: AES-256-CTR Encryption
    const aesCtrEncrypted = await aesCtrEncrypt(keys.aesKey2, aesGcmEncrypted);

    // Step 3: XOR Encryption
    const xorEncrypted = XORencrypt(keys.xorKey, aesCtrEncrypted);

    // Step 4: Convert Encrypted Data to Emojis
    const emojis = getEmojiArray();
    const encryptedEmoji = mapBytesToSymbols(xorEncrypted, emojis);

    return encryptedEmoji.join("​");
}

/**
 * Decrypts a message represented as emojis using XOR, AES-256-CTR, and AES-256-GCM decryption.
 * @param {string} message - The encrypted message represented as emojis.
 * @param {object} keys - An object containing aesKey1, aesKey2, and xorKey as Uint8Arrays.
 * @returns {Promise<string>} The decrypted message.
 */
async function decrypt(message, keys) {
    if (!keys || !(keys.aesKey1 instanceof Uint8Array) || !(keys.aesKey2 instanceof Uint8Array) || !(keys.xorKey instanceof Uint8Array)) {
        throw new Error("Invalid keys provided.");
    }

    try {
        const emojis = getEmojiArray();
        const encryptedBytes = mapSymbolsToBytes(message.split("​"), emojis);

        // Step 1: XOR Decryption
        const aesCtrEncrypted = XORdecrypt(keys.xorKey, encryptedBytes);

        // Step 2: AES-256-CTR Decryption
        const aesGcmEncrypted = await aesCtrDecrypt(keys.aesKey2, aesCtrEncrypted);

        // Step 3: AES-256-GCM Decryption
        const decryptedBytes = await aesGcmDecrypt(keys.aesKey1, aesGcmEncrypted);
        const decryptedMessage = decodeUTF8(decryptedBytes);

        return decryptedMessage;
    } catch (err) {
        console.error("Decryption failed:", err);
        return "";
    }
}

/**
 * Encodes a message into emojis without encryption.
 * @param {string} message - The message to encode.
 * @returns {string} The encoded message represented as emojis.
 */
function encode(message, customEmojiArray = null) {
    const bytes = new TextEncoder().encode(message);
    const emojis = customEmojiArray || getEmojiArray();
    const encodedEmoji = mapBytesToSymbols(bytes, emojis);
    return encodedEmoji.join("​");
}

/**
 * Decodes a message from emojis without decryption.
 * @param {string} message - The message represented as emojis.
 * @returns {string} The decoded message.
 */
function decode(message, customEmojiArray = null) {
    let bytes;
    let decoded;
    const emojis = customEmojiArray || getEmojiArray();
    try {
        // Split into array and map emojis to bytes
        bytes = mapSymbolsToBytes(message.split("​"), emojis);
        decoded = new TextDecoder().decode(Uint8Array.from(bytes));
    } catch (err) {
        return "";
    }

    return decoded;
}

/**
 * Retrieves the array of emojis used for encoding and encryption.
 * @returns {string[]} The array of emojis.
 */
function getEmojiArray() {
    let totalPack = ["😀", "😃", "😄", "😁", "😆", "😅", "🤣", "😂", "🙂", "🙃", "🫠", "😉", "😊", "😇", "🥰", "😍", "🤩", "😘", "😗", "☺️", "☺", "😚", "😙", "🥲", "😋", "😛", "😜", "🤪", "😝", "🤑", "🤗", "🤭", "🫢", "🫣", "🤫", "🤔", "🫡", "🤐", "🤨", "😐", "😑", "😶", "🫥", "😶‍🌫️", "😶‍🌫", "😏", "😒", "🙄", "😬", "😮‍💨", "🤥", "🫨", "😌", "😔", "😪", "🤤", "😴", "😷", "🤒", "🤕", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "😵‍💫", "🤯", "🤠", "🥳", "🥸", "😎", "🤓", "🧐", "😕", "🫤", "😟", "🙁", "☹️", "☹", "😮", "😯", "😲", "😳", "🥺", "🥹", "😦", "😧", "😨", "😰", "😥", "😢", "😭", "😱", "😖", "😣", "😞", "😓", "😩", "😫", "🥱", "😤", "😡", "😠", "🤬", "😈", "👿", "💀", "☠️", "☠", "💩", "🤡", "👹", "👺", "👻", "👽", "👾", "🤖", "😺", "😸", "😹", "😻", "😼", "😽", "🙀", "😿", "😾", "🙈", "🙉", "🙊", "💌", "💘", "💝", "💖", "💗", "💓", "💞", "💕", "💟", "❣️", "❣", "💔", "❤️‍🔥", "❤‍🔥", "❤️‍🩹", "❤‍🩹", "❤️", "❤", "🩷", "🧡", "💛", "💚", "💙", "🩵", "💜", "🤎", "🖤", "🩶", "🤍", "💋", "💯", "💢", "💥", "💫", "💦", "💨", "🕳️", "🕳", "💬", "👁️‍🗨️", "👁‍🗨️", "👁️‍🗨", "👁‍🗨", "🗨️", "🗨", "🗯️", "🗯", "💭", "💤", "👋", "👋🏻", "👋🏼", "👋🏽", "👋🏾", "👋🏿", "🤚", "🤚🏻", "🤚🏼", "🤚🏽", "🤚🏾", "🤚🏿", "🖐️", "🖐", "🖐🏻", "🖐🏼", "🖐🏽", "🖐🏾", "🖐🏿", "✋", "✋🏻", "✋🏼", "✋🏽", "✋🏾", "✋🏿", "🖖", "🖖🏻", "🖖🏼", "🖖🏽", "🖖🏾", "🖖🏿", "🫱", "🫱🏻", "🫱🏼", "🫱🏽", "🫱🏾", "🫱🏿", "🫲", "🫲🏻", "🫲🏼", "🫲🏽", "🫲🏾", "🫲🏿", "🫳", "🫳🏻", "🫳🏼", "🫳🏽", "🫳🏾", "🫳🏿", "🫴", "🫴🏻", "🫴🏼", "🫴🏽", "🫴🏾", "🫴🏿", "🫷", "🫷🏻", "🫷🏼", "🫷🏽", "🫷🏾", "🫷🏿", "🫸", "🫸🏻", "🫸🏼", "🫸🏽", "🫸🏾", "🫸🏿", "👌", "👌🏻", "👌🏼", "👌🏽", "👌🏾", "👌🏿", "🤌", "🤌🏻", "🤌🏼", "🤌🏽", "🤌🏾", "🤌🏿", "🤏", "🤏🏻", "🤏🏼", "🤏🏽", "🤏🏾", "🤏🏿", "✌️", "✌", "✌🏻", "✌🏼", "✌🏽", "✌🏾", "✌🏿", "🤞", "🤞🏻", "🤞🏼", "🤞🏽", "🤞🏾", "🤞🏿", "🫰", "🫰🏻", "🫰🏼", "🫰🏽", "🫰🏾", "🫰🏿", "🤟", "🤟🏻", "🤟🏼", "🤟🏽", "🤟🏾", "🤟🏿", "🤘", "🤘🏻", "🤘🏼", "🤘🏽", "🤘🏾", "🤘🏿", "🤙", "🤙🏻", "🤙🏼", "🤙🏽", "🤙🏾", "🤙🏿", "👈", "👈🏻", "👈🏼", "👈🏽", "👈🏾", "👈🏿", "👉", "👉🏻", "👉🏼", "👉🏽", "👉🏾", "👉🏿", "👆", "👆🏻", "👆🏼", "👆🏽", "👆🏾", "👆🏿", "🖕", "🖕🏻", "🖕🏼", "🖕🏽", "🖕🏾", "🖕🏿", "👇", "👇🏻", "👇🏼", "👇🏽", "👇🏾", "👇🏿", "☝️", "☝", "☝🏻", "☝🏼", "☝🏽", "☝🏾", "☝🏿", "🫵", "🫵🏻", "🫵🏼", "🫵🏽", "🫵🏾", "🫵🏿", "👍", "👍🏻", "👍🏼", "👍🏽", "👍🏾", "👍🏿", "👎", "👎🏻", "👎🏼", "👎🏽", "👎🏾", "👎🏿", "✊", "✊🏻", "✊🏼", "✊🏽", "✊🏾", "✊🏿", "👊", "👊🏻", "👊🏼", "👊🏽", "👊🏾", "👊🏿", "🤛", "🤛🏻", "🤛🏼", "🤛🏽", "🤛🏾", "🤛🏿", "🤜", "🤜🏻", "🤜🏼", "🤜🏽", "🤜🏾", "🤜🏿", "👏", "👏🏻", "👏🏼", "👏🏽", "👏🏾", "👏🏿", "🙌", "🙌🏻", "🙌🏼", "🙌🏽", "🙌🏾", "🙌🏿", "🫶", "🫶🏻", "🫶🏼", "🫶🏽", "🫶🏾", "🫶🏿", "👐", "👐🏻", "👐🏼", "👐🏽", "👐🏾", "👐🏿", "🤲", "🤲🏻", "🤲🏼", "🤲🏽", "🤲🏾", "🤲🏿", "🤝", "🤝🏻", "🤝🏼", "🤝🏽", "🤝🏾", "🤝🏿", "🫱🏻‍🫲🏼", "🫱🏻‍🫲🏽", "🫱🏻‍🫲🏾", "🫱🏻‍🫲🏿", "🫱🏼‍🫲🏻", "🫱🏼‍🫲🏽", "🫱🏼‍🫲🏾", "🫱🏼‍🫲🏿", "🫱🏽‍🫲🏻", "🫱🏽‍🫲🏼", "🫱🏽‍🫲🏾", "🫱🏽‍🫲🏿", "🫱🏾‍🫲🏻", "🫱🏾‍🫲🏼", "🫱🏾‍🫲🏽", "🫱🏾‍🫲🏿", "🫱🏿‍🫲🏻", "🫱🏿‍🫲🏼", "🫱🏿‍🫲🏽", "🫱🏿‍🫲🏾", "🙏", "🙏🏻", "🙏🏼", "🙏🏽", "🙏🏾", "🙏🏿", "✍️", "✍", "✍🏻", "✍🏼", "✍🏽", "✍🏾", "✍🏿", "💅", "💅🏻", "💅🏼", "💅🏽", "💅🏾", "💅🏿", "🤳", "🤳🏻", "🤳🏼", "🤳🏽", "🤳🏾", "🤳🏿", "💪", "💪🏻", "💪🏼", "💪🏽", "💪🏾", "💪🏿", "🦾", "🦿", "🦵", "🦵🏻", "🦵🏼", "🦵🏽", "🦵🏾", "🦵🏿", "🦶", "🦶🏻", "🦶🏼", "🦶🏽", "🦶🏾", "🦶🏿", "👂", "👂🏻", "👂🏼", "👂🏽", "👂🏾", "👂🏿", "🦻", "🦻🏻", "🦻🏼", "🦻🏽", "🦻🏾", "🦻🏿", "👃", "👃🏻", "👃🏼", "👃🏽", "👃🏾", "👃🏿", "🧠", "🫀", "🫁", "🦷", "🦴", "👀", "👁️", "👁", "👅", "👄", "🫦", "👶", "👶🏻", "👶🏼", "👶🏽", "👶🏾", "👶🏿", "🧒", "🧒🏻", "🧒🏼", "🧒🏽", "🧒🏾", "🧒🏿", "👦", "👦🏻", "👦🏼", "👦🏽", "👦🏾", "👦🏿", "👧", "👧🏻", "👧🏼", "👧🏽", "👧🏾", "👧🏿", "🧑", "🧑🏻", "🧑🏼", "🧑🏽", "🧑🏾", "🧑🏿", "👱", "👱🏻", "👱🏼", "👱🏽", "👱🏾", "👱🏿", "👨", "👨🏻", "👨🏼", "👨🏽", "👨🏾", "👨🏿", "🧔", "🧔🏻", "🧔🏼", "🧔🏽", "🧔🏾", "🧔🏿", "🧔‍♂️", "🧔‍♂", "🧔🏻‍♂️", "🧔🏻‍♂", "🧔🏼‍♂️", "🧔🏼‍♂", "🧔🏽‍♂️", "🧔🏽‍♂", "🧔🏾‍♂️", "🧔🏾‍♂", "🧔🏿‍♂️", "🧔🏿‍♂", "🧔‍♀️", "🧔‍♀", "🧔🏻‍♀️", "🧔🏻‍♀", "🧔🏼‍♀️", "🧔🏼‍♀", "🧔🏽‍♀️", "🧔🏽‍♀", "🧔🏾‍♀️", "🧔🏾‍♀", "🧔🏿‍♀️", "🧔🏿‍♀", "👨‍🦰", "👨🏻‍🦰", "👨🏼‍🦰", "👨🏽‍🦰", "👨🏾‍🦰", "👨🏿‍🦰", "👨‍🦱", "👨🏻‍🦱", "👨🏼‍🦱", "👨🏽‍🦱", "👨🏾‍🦱", "👨🏿‍🦱", "👨‍🦳", "👨🏻‍🦳", "👨🏼‍🦳", "👨🏽‍🦳", "👨🏾‍🦳", "👨🏿‍🦳", "👨‍🦲", "👨🏻‍🦲", "👨🏼‍🦲", "👨🏽‍🦲", "👨🏾‍🦲", "👨🏿‍🦲", "👩", "👩🏻", "👩🏼", "👩🏽", "👩🏾", "👩🏿", "👩‍🦰", "👩🏻‍🦰", "👩🏼‍🦰", "👩🏽‍🦰", "👩🏾‍🦰", "👩🏿‍🦰", "🧑‍🦰", "🧑🏻‍🦰", "🧑🏼‍🦰", "🧑🏽‍🦰", "🧑🏾‍🦰", "🧑🏿‍🦰", "👩‍🦱", "👩🏻‍🦱", "👩🏼‍🦱", "👩🏽‍🦱", "👩🏾‍🦱", "👩🏿‍🦱", "🧑‍🦱", "🧑🏻‍🦱", "🧑🏼‍🦱", "🧑🏽‍🦱", "🧑🏾‍🦱", "🧑🏿‍🦱", "👩‍🦳", "👩🏻‍🦳", "👩🏼‍🦳", "👩🏽‍🦳", "👩🏾‍🦳", "👩🏿‍🦳", "🧑‍🦳", "🧑🏻‍🦳", "🧑🏼‍🦳", "🧑🏽‍🦳", "🧑🏾‍🦳", "🧑🏿‍🦳", "👩‍🦲", "👩🏻‍🦲", "👩🏼‍🦲", "👩🏽‍🦲", "👩🏾‍🦲", "👩🏿‍🦲", "🧑‍🦲", "🧑🏻‍🦲", "🧑🏼‍🦲", "🧑🏽‍🦲", "🧑🏾‍🦲", "🧑🏿‍🦲", "👱‍♀️", "👱‍♀", "👱🏻‍♀️", "👱🏻‍♀", "👱🏼‍♀️", "👱🏼‍♀", "👱🏽‍♀️", "👱🏽‍♀", "👱🏾‍♀️", "👱🏾‍♀", "👱🏿‍♀️", "👱🏿‍♀", "👱‍♂️", "👱‍♂", "👱🏻‍♂️", "👱🏻‍♂", "👱🏼‍♂️", "👱🏼‍♂", "👱🏽‍♂️", "👱🏽‍♂", "👱🏾‍♂️", "👱🏾‍♂", "👱🏿‍♂️", "👱🏿‍♂", "🧓", "🧓🏻", "🧓🏼", "🧓🏽", "🧓🏾", "🧓🏿", "👴", "👴🏻", "👴🏼", "👴🏽", "👴🏾", "👴🏿", "👵", "👵🏻", "👵🏼", "👵🏽", "👵🏾", "👵🏿", "🙍", "🙍🏻", "🙍🏼", "🙍🏽", "🙍🏾", "🙍🏿", "🙍‍♂️", "🙍‍♂", "🙍🏻‍♂️", "🙍🏻‍♂", "🙍🏼‍♂️", "🙍🏼‍♂", "🙍🏽‍♂️", "🙍🏽‍♂", "🙍🏾‍♂️", "🙍🏾‍♂", "🙍🏿‍♂️", "🙍🏿‍♂", "🙍‍♀️", "🙍‍♀", "🙍🏻‍♀️", "🙍🏻‍♀", "🙍🏼‍♀️", "🙍🏼‍♀", "🙍🏽‍♀️", "🙍🏽‍♀", "🙍🏾‍♀️", "🙍🏾‍♀", "🙍🏿‍♀️", "🙍🏿‍♀", "🙎", "🙎🏻", "🙎🏼", "🙎🏽", "🙎🏾", "🙎🏿", "🙎‍♂️", "🙎‍♂", "🙎🏻‍♂️", "🙎🏻‍♂", "🙎🏼‍♂️", "🙎🏼‍♂", "🙎🏽‍♂️", "🙎🏽‍♂", "🙎🏾‍♂️", "🙎🏾‍♂", "🙎🏿‍♂️", "🙎🏿‍♂", "🙎‍♀️", "🙎‍♀", "🙎🏻‍♀️", "🙎🏻‍♀", "🙎🏼‍♀️", "🙎🏼‍♀", "🙎🏽‍♀️", "🙎🏽‍♀", "🙎🏾‍♀️", "🙎🏾‍♀", "🙎🏿‍♀️", "🙎🏿‍♀", "🙅", "🙅🏻", "🙅🏼", "🙅🏽", "🙅🏾", "🙅🏿", "🙅‍♂️", "🙅‍♂", "🙅🏻‍♂️", "🙅🏻‍♂", "🙅🏼‍♂️", "🙅🏼‍♂", "🙅🏽‍♂️", "🙅🏽‍♂", "🙅🏾‍♂️", "🙅🏾‍♂", "🙅🏿‍♂️", "🙅🏿‍♂", "🙅‍♀️", "🙅‍♀", "🙅🏻‍♀️", "🙅🏻‍♀", "🙅🏼‍♀️", "🙅🏼‍♀", "🙅🏽‍♀️", "🙅🏽‍♀", "🙅🏾‍♀️", "🙅🏾‍♀", "🙅🏿‍♀️", "🙅🏿‍♀", "🙆", "🙆🏻", "🙆🏼", "🙆🏽", "🙆🏾", "🙆🏿", "🙆‍♂️", "🙆‍♂", "🙆🏻‍♂️", "🙆🏻‍♂", "🙆🏼‍♂️", "🙆🏼‍♂", "🙆🏽‍♂️", "🙆🏽‍♂", "🙆🏾‍♂️", "🙆🏾‍♂", "🙆🏿‍♂️", "🙆🏿‍♂", "🙆‍♀️", "🙆‍♀", "🙆🏻‍♀️", "🙆🏻‍♀", "🙆🏼‍♀️", "🙆🏼‍♀", "🙆🏽‍♀️", "🙆🏽‍♀", "🙆🏾‍♀️", "🙆🏾‍♀", "🙆🏿‍♀️", "🙆🏿‍♀", "💁", "💁🏻", "💁🏼", "💁🏽", "💁🏾", "💁🏿", "💁‍♂️", "💁‍♂", "💁🏻‍♂️", "💁🏻‍♂", "💁🏼‍♂️", "💁🏼‍♂", "💁🏽‍♂️", "💁🏽‍♂", "💁🏾‍♂️", "💁🏾‍♂", "💁🏿‍♂️", "💁🏿‍♂", "💁‍♀️", "💁‍♀", "💁🏻‍♀️", "💁🏻‍♀", "💁🏼‍♀️", "💁🏼‍♀", "💁🏽‍♀️", "💁🏽‍♀", "💁🏾‍♀️", "💁🏾‍♀", "💁🏿‍♀️", "💁🏿‍♀", "🙋", "🙋🏻", "🙋🏼", "🙋🏽", "🙋🏾", "🙋🏿", "🙋‍♂️", "🙋‍♂", "🙋🏻‍♂️", "🙋🏻‍♂", "🙋🏼‍♂️", "🙋🏼‍♂", "🙋🏽‍♂️", "🙋🏽‍♂", "🙋🏾‍♂️", "🙋🏾‍♂", "🙋🏿‍♂️", "🙋🏿‍♂", "🙋‍♀️", "🙋‍♀", "🙋🏻‍♀️", "🙋🏻‍♀", "🙋🏼‍♀️", "🙋🏼‍♀", "🙋🏽‍♀️", "🙋🏽‍♀", "🙋🏾‍♀️", "🙋🏾‍♀", "🙋🏿‍♀️", "🙋🏿‍♀", "🧏", "🧏🏻", "🧏🏼", "🧏🏽", "🧏🏾", "🧏🏿", "🧏‍♂️", "🧏‍♂", "🧏🏻‍♂️", "🧏🏻‍♂", "🧏🏼‍♂️", "🧏🏼‍♂", "🧏🏽‍♂️", "🧏🏽‍♂", "🧏🏾‍♂️", "🧏🏾‍♂", "🧏🏿‍♂️", "🧏🏿‍♂", "🧏‍♀️", "🧏‍♀", "🧏🏻‍♀️", "🧏🏻‍♀", "🧏🏼‍♀️", "🧏🏼‍♀", "🧏🏽‍♀️", "🧏🏽‍♀", "🧏🏾‍♀️", "🧏🏾‍♀", "🧏🏿‍♀️", "🧏🏿‍♀", "🙇", "🙇🏻", "🙇🏼", "🙇🏽", "🙇🏾", "🙇🏿", "🙇‍♂️", "🙇‍♂", "🙇🏻‍♂️", "🙇🏻‍♂", "🙇🏼‍♂️", "🙇🏼‍♂", "🙇🏽‍♂️", "🙇🏽‍♂", "🙇🏾‍♂️", "🙇🏾‍♂", "🙇🏿‍♂️", "🙇🏿‍♂", "🙇‍♀️", "🙇‍♀", "🙇🏻‍♀️", "🙇🏻‍♀", "🙇🏼‍♀️", "🙇🏼‍♀", "🙇🏽‍♀️", "🙇🏽‍♀", "🙇🏾‍♀️", "🙇🏾‍♀", "🙇🏿‍♀️", "🙇🏿‍♀", "🤦", "🤦🏻", "🤦🏼", "🤦🏽", "🤦🏾", "🤦🏿", "🤦‍♂️", "🤦‍♂", "🤦🏻‍♂️", "🤦🏻‍♂", "🤦🏼‍♂️", "🤦🏼‍♂", "🤦🏽‍♂️", "🤦🏽‍♂", "🤦🏾‍♂️", "🤦🏾‍♂", "🤦🏿‍♂️", "🤦🏿‍♂", "🤦‍♀️", "🤦‍♀", "🤦🏻‍♀️", "🤦🏻‍♀", "🤦🏼‍♀️", "🤦🏼‍♀", "🤦🏽‍♀️", "🤦🏽‍♀", "🤦🏾‍♀️", "🤦🏾‍♀", "🤦🏿‍♀️", "🤦🏿‍♀", "🤷", "🤷🏻", "🤷🏼", "🤷🏽", "🤷🏾", "🤷🏿", "🤷‍♂️", "🤷‍♂", "🤷🏻‍♂️", "🤷🏻‍♂", "🤷🏼‍♂️", "🤷🏼‍♂", "🤷🏽‍♂️", "🤷🏽‍♂", "🤷🏾‍♂️", "🤷🏾‍♂", "🤷🏿‍♂️", "🤷🏿‍♂", "🤷‍♀️", "🤷‍♀", "🤷🏻‍♀️", "🤷🏻‍♀", "🤷🏼‍♀️", "🤷🏼‍♀", "🤷🏽‍♀️", "🤷🏽‍♀", "🤷🏾‍♀️", "🤷🏾‍♀", "🤷🏿‍♀️", "🤷🏿‍♀", "🧑‍⚕️", "🧑‍⚕", "🧑🏻‍⚕️", "🧑🏻‍⚕", "🧑🏼‍⚕️", "🧑🏼‍⚕", "🧑🏽‍⚕️", "🧑🏽‍⚕", "🧑🏾‍⚕️", "🧑🏾‍⚕", "🧑🏿‍⚕️", "🧑🏿‍⚕", "👨‍⚕️", "👨‍⚕", "👨🏻‍⚕️", "👨🏻‍⚕", "👨🏼‍⚕️", "👨🏼‍⚕", "👨🏽‍⚕️", "👨🏽‍⚕", "👨🏾‍⚕️", "👨🏾‍⚕", "👨🏿‍⚕️", "👨🏿‍⚕", "👩‍⚕️", "👩‍⚕", "👩🏻‍⚕️", "👩🏻‍⚕", "👩🏼‍⚕️", "👩🏼‍⚕", "👩🏽‍⚕️", "👩🏽‍⚕", "👩🏾‍⚕️", "👩🏾‍⚕", "👩🏿‍⚕️", "👩🏿‍⚕", "🧑‍🎓", "🧑🏻‍🎓", "🧑🏼‍🎓", "🧑🏽‍🎓", "🧑🏾‍🎓", "🧑🏿‍🎓", "👨‍🎓", "👨🏻‍🎓", "👨🏼‍🎓", "👨🏽‍🎓", "👨🏾‍🎓", "👨🏿‍🎓", "👩‍🎓", "👩🏻‍🎓", "👩🏼‍🎓", "👩🏽‍🎓", "👩🏾‍🎓", "👩🏿‍🎓", "🧑‍🏫", "🧑🏻‍🏫", "🧑🏼‍🏫", "🧑🏽‍🏫", "🧑🏾‍🏫", "🧑🏿‍🏫", "👨‍🏫", "👨🏻‍🏫", "👨🏼‍🏫", "👨🏽‍🏫", "👨🏾‍🏫", "👨🏿‍🏫", "👩‍🏫", "👩🏻‍🏫", "👩🏼‍🏫", "👩🏽‍🏫", "👩🏾‍🏫", "👩🏿‍🏫", "🧑‍⚖️", "🧑‍⚖", "🧑🏻‍⚖️", "🧑🏻‍⚖", "🧑🏼‍⚖️", "🧑🏼‍⚖", "🧑🏽‍⚖️", "🧑🏽‍⚖", "🧑🏾‍⚖️", "🧑🏾‍⚖", "🧑🏿‍⚖️", "🧑🏿‍⚖", "👨‍⚖️", "👨‍⚖", "👨🏻‍⚖️", "👨🏻‍⚖", "👨🏼‍⚖️", "👨🏼‍⚖", "👨🏽‍⚖️", "👨🏽‍⚖", "👨🏾‍⚖️", "👨🏾‍⚖", "👨🏿‍⚖️", "👨🏿‍⚖", "👩‍⚖️", "👩‍⚖", "👩🏻‍⚖️", "👩🏻‍⚖", "👩🏼‍⚖️", "👩🏼‍⚖", "👩🏽‍⚖️", "👩🏽‍⚖", "👩🏾‍⚖️", "👩🏾‍⚖", "👩🏿‍⚖️", "👩🏿‍⚖", "🧑‍🌾", "🧑🏻‍🌾", "🧑🏼‍🌾", "🧑🏽‍🌾", "🧑🏾‍🌾", "🧑🏿‍🌾", "👨‍🌾", "👨🏻‍🌾", "👨🏼‍🌾", "👨🏽‍🌾", "👨🏾‍🌾", "👨🏿‍🌾", "👩‍🌾", "👩🏻‍🌾", "👩🏼‍🌾", "👩🏽‍🌾", "👩🏾‍🌾", "👩🏿‍🌾", "🧑‍🍳", "🧑🏻‍🍳", "🧑🏼‍🍳", "🧑🏽‍🍳", "🧑🏾‍🍳", "🧑🏿‍🍳", "👨‍🍳", "👨🏻‍🍳", "👨🏼‍🍳", "👨🏽‍🍳", "👨🏾‍🍳", "👨🏿‍🍳", "👩‍🍳", "👩🏻‍🍳", "👩🏼‍🍳", "👩🏽‍🍳", "👩🏾‍🍳", "👩🏿‍🍳", "🧑‍🔧", "🧑🏻‍🔧", "🧑🏼‍🔧", "🧑🏽‍🔧", "🧑🏾‍🔧", "🧑🏿‍🔧", "👨‍🔧", "👨🏻‍🔧", "👨🏼‍🔧", "👨🏽‍🔧", "👨🏾‍🔧", "👨🏿‍🔧", "👩‍🔧", "👩🏻‍🔧", "👩🏼‍🔧", "👩🏽‍🔧", "👩🏾‍🔧", "👩🏿‍🔧", "🧑‍🏭", "🧑🏻‍🏭", "🧑🏼‍🏭", "🧑🏽‍🏭", "🧑🏾‍🏭", "🧑🏿‍🏭", "👨‍🏭", "👨🏻‍🏭", "👨🏼‍🏭", "👨🏽‍🏭", "👨🏾‍🏭", "👨🏿‍🏭", "👩‍🏭", "👩🏻‍🏭", "👩🏼‍🏭", "👩🏽‍🏭", "👩🏾‍🏭", "👩🏿‍🏭", "🧑‍💼", "🧑🏻‍💼", "🧑🏼‍💼", "🧑🏽‍💼", "🧑🏾‍💼", "🧑🏿‍💼", "👨‍💼", "👨🏻‍💼", "👨🏼‍💼", "👨🏽‍💼", "👨🏾‍💼", "👨🏿‍💼", "👩‍💼", "👩🏻‍💼", "👩🏼‍💼", "👩🏽‍💼", "👩🏾‍💼", "👩🏿‍💼", "🧑‍🔬", "🧑🏻‍🔬", "🧑🏼‍🔬", "🧑🏽‍🔬", "🧑🏾‍🔬", "🧑🏿‍🔬", "👨‍🔬", "👨🏻‍🔬", "👨🏼‍🔬", "👨🏽‍🔬", "👨🏾‍🔬", "👨🏿‍🔬", "👩‍🔬", "👩🏻‍🔬", "👩🏼‍🔬", "👩🏽‍🔬", "👩🏾‍🔬", "👩🏿‍🔬", "🧑‍💻", "🧑🏻‍💻", "🧑🏼‍💻", "🧑🏽‍💻", "🧑🏾‍💻", "🧑🏿‍💻", "👨‍💻", "👨🏻‍💻", "👨🏼‍💻", "👨🏽‍💻", "👨🏾‍💻", "👨🏿‍💻", "👩‍💻", "👩🏻‍💻", "👩🏼‍💻", "👩🏽‍💻", "👩🏾‍💻", "👩🏿‍💻", "🧑‍🎤", "🧑🏻‍🎤", "🧑🏼‍🎤", "🧑🏽‍🎤", "🧑🏾‍🎤", "🧑🏿‍🎤", "👨‍🎤", "👨🏻‍🎤", "👨🏼‍🎤", "👨🏽‍🎤", "👨🏾‍🎤", "👨🏿‍🎤", "👩‍🎤", "👩🏻‍🎤", "👩🏼‍🎤", "👩🏽‍🎤", "👩🏾‍🎤", "👩🏿‍🎤", "🧑‍🎨", "🧑🏻‍🎨", "🧑🏼‍🎨", "🧑🏽‍🎨", "🧑🏾‍🎨", "🧑🏿‍🎨", "👨‍🎨", "👨🏻‍🎨", "👨🏼‍🎨", "👨🏽‍🎨", "👨🏾‍🎨", "👨🏿‍🎨", "👩‍🎨", "👩🏻‍🎨", "👩🏼‍🎨", "👩🏽‍🎨", "👩🏾‍🎨", "👩🏿‍🎨", "🧑‍✈️", "🧑‍✈", "🧑🏻‍✈️", "🧑🏻‍✈", "🧑🏼‍✈️", "🧑🏼‍✈", "🧑🏽‍✈️", "🧑🏽‍✈", "🧑🏾‍✈️", "🧑🏾‍✈", "🧑🏿‍✈️", "🧑🏿‍✈", "👨‍✈️", "👨‍✈", "👨🏻‍✈️", "👨🏻‍✈", "👨🏼‍✈️", "👨🏼‍✈", "👨🏽‍✈️", "👨🏽‍✈", "👨🏾‍✈️", "👨🏾‍✈", "👨🏿‍✈️", "👨🏿‍✈", "👩‍✈️", "👩‍✈", "👩🏻‍✈️", "👩🏻‍✈", "👩🏼‍✈️", "👩🏼‍✈", "👩🏽‍✈️", "👩🏽‍✈", "👩🏾‍✈️", "👩🏾‍✈", "👩🏿‍✈️", "👩🏿‍✈", "🧑‍🚀", "🧑🏻‍🚀", "🧑🏼‍🚀", "🧑🏽‍🚀", "🧑🏾‍🚀", "🧑🏿‍🚀", "👨‍🚀", "👨🏻‍🚀", "👨🏼‍🚀", "👨🏽‍🚀", "👨🏾‍🚀", "👨🏿‍🚀", "👩‍🚀", "👩🏻‍🚀", "👩🏼‍🚀", "👩🏽‍🚀", "👩🏾‍🚀", "👩🏿‍🚀", "🧑‍🚒", "🧑🏻‍🚒", "🧑🏼‍🚒", "🧑🏽‍🚒", "🧑🏾‍🚒", "🧑🏿‍🚒", "👨‍🚒", "👨🏻‍🚒", "👨🏼‍🚒", "👨🏽‍🚒", "👨🏾‍🚒", "👨🏿‍🚒", "👩‍🚒", "👩🏻‍🚒", "👩🏼‍🚒", "👩🏽‍🚒", "👩🏾‍🚒", "👩🏿‍🚒", "👮", "👮🏻", "👮🏼", "👮🏽", "👮🏾", "👮🏿", "👮‍♂️", "👮‍♂", "👮🏻‍♂️", "👮🏻‍♂", "👮🏼‍♂️", "👮🏼‍♂", "👮🏽‍♂️", "👮🏽‍♂", "👮🏾‍♂️", "👮🏾‍♂", "👮🏿‍♂️", "👮🏿‍♂", "👮‍♀️", "👮‍♀", "👮🏻‍♀️", "👮🏻‍♀", "👮🏼‍♀️", "👮🏼‍♀", "👮🏽‍♀️", "👮🏽‍♀", "👮🏾‍♀️", "👮🏾‍♀", "👮🏿‍♀️", "👮🏿‍♀", "🕵️", "🕵", "🕵🏻", "🕵🏼", "🕵🏽", "🕵🏾", "🕵🏿", "🕵️‍♂️", "🕵‍♂️", "🕵️‍♂", "🕵‍♂", "🕵🏻‍♂️", "🕵🏻‍♂", "🕵🏼‍♂️", "🕵🏼‍♂", "🕵🏽‍♂️", "🕵🏽‍♂", "🕵🏾‍♂️", "🕵🏾‍♂", "🕵🏿‍♂️", "🕵🏿‍♂", "🕵️‍♀️", "🕵‍♀️", "🕵️‍♀", "🕵‍♀", "🕵🏻‍♀️", "🕵🏻‍♀", "🕵🏼‍♀️", "🕵🏼‍♀", "🕵🏽‍♀️", "🕵🏽‍♀", "🕵🏾‍♀️", "🕵🏾‍♀", "🕵🏿‍♀️", "🕵🏿‍♀", "💂", "💂🏻", "💂🏼", "💂🏽", "💂🏾", "💂🏿", "💂‍♂️", "💂‍♂", "💂🏻‍♂️", "💂🏻‍♂", "💂🏼‍♂️", "💂🏼‍♂", "💂🏽‍♂️", "💂🏽‍♂", "💂🏾‍♂️", "💂🏾‍♂", "💂🏿‍♂️", "💂🏿‍♂", "💂‍♀️", "💂‍♀", "💂🏻‍♀️", "💂🏻‍♀", "💂🏼‍♀️", "💂🏼‍♀", "💂🏽‍♀️", "💂🏽‍♀", "💂🏾‍♀️", "💂🏾‍♀", "💂🏿‍♀️", "💂🏿‍♀", "🥷", "🥷🏻", "🥷🏼", "🥷🏽", "🥷🏾", "🥷🏿", "👷", "👷🏻", "👷🏼", "👷🏽", "👷🏾", "👷🏿", "👷‍♂️", "👷‍♂", "👷🏻‍♂️", "👷🏻‍♂", "👷🏼‍♂️", "👷🏼‍♂", "👷🏽‍♂️", "👷🏽‍♂", "👷🏾‍♂️", "👷🏾‍♂", "👷🏿‍♂️", "👷🏿‍♂", "👷‍♀️", "👷‍♀", "👷🏻‍♀️", "👷🏻‍♀", "👷🏼‍♀️", "👷🏼‍♀", "👷🏽‍♀️", "👷🏽‍♀", "👷🏾‍♀️", "👷🏾‍♀", "👷🏿‍♀️", "👷🏿‍♀", "🫅", "🫅🏻", "🫅🏼", "🫅🏽", "🫅🏾", "🫅🏿", "🤴", "🤴🏻", "🤴🏼", "🤴🏽", "🤴🏾", "🤴🏿", "👸", "👸🏻", "👸🏼", "👸🏽", "👸🏾", "👸🏿", "👳", "👳🏻", "👳🏼", "👳🏽", "👳🏾", "👳🏿", "👳‍♂️", "👳‍♂", "👳🏻‍♂️", "👳🏻‍♂", "👳🏼‍♂️", "👳🏼‍♂", "👳🏽‍♂️", "👳🏽‍♂", "👳🏾‍♂️", "👳🏾‍♂", "👳🏿‍♂️", "👳🏿‍♂", "👳‍♀️", "👳‍♀", "👳🏻‍♀️", "👳🏻‍♀", "👳🏼‍♀️", "👳🏼‍♀", "👳🏽‍♀️", "👳🏽‍♀", "👳🏾‍♀️", "👳🏾‍♀", "👳🏿‍♀️", "👳🏿‍♀", "👲", "👲🏻", "👲🏼", "👲🏽", "👲🏾", "👲🏿", "🧕", "🧕🏻", "🧕🏼", "🧕🏽", "🧕🏾", "🧕🏿", "🤵", "🤵🏻", "🤵🏼", "🤵🏽", "🤵🏾", "🤵🏿", "🤵‍♂️", "🤵‍♂", "🤵🏻‍♂️", "🤵🏻‍♂", "🤵🏼‍♂️", "🤵🏼‍♂", "🤵🏽‍♂️", "🤵🏽‍♂", "🤵🏾‍♂️", "🤵🏾‍♂", "🤵🏿‍♂️", "🤵🏿‍♂", "🤵‍♀️", "🤵‍♀", "🤵🏻‍♀️", "🤵🏻‍♀", "🤵🏼‍♀️", "🤵🏼‍♀", "🤵🏽‍♀️", "🤵🏽‍♀", "🤵🏾‍♀️", "🤵🏾‍♀", "🤵🏿‍♀️", "🤵🏿‍♀", "👰", "👰🏻", "👰🏼", "👰🏽", "👰🏾", "👰🏿", "👰‍♂️", "👰‍♂", "👰🏻‍♂️", "👰🏻‍♂", "👰🏼‍♂️", "👰🏼‍♂", "👰🏽‍♂️", "👰🏽‍♂", "👰🏾‍♂️", "👰🏾‍♂", "👰🏿‍♂️", "👰🏿‍♂", "👰‍♀️", "👰‍♀", "👰🏻‍♀️", "👰🏻‍♀", "👰🏼‍♀️", "👰🏼‍♀", "👰🏽‍♀️", "👰🏽‍♀", "👰🏾‍♀️", "👰🏾‍♀", "👰🏿‍♀️", "👰🏿‍♀", "🤰", "🤰🏻", "🤰🏼", "🤰🏽", "🤰🏾", "🤰🏿", "🫃", "🫃🏻", "🫃🏼", "🫃🏽", "🫃🏾", "🫃🏿", "🫄", "🫄🏻", "🫄🏼", "🫄🏽", "🫄🏾", "🫄🏿", "🤱", "🤱🏻", "🤱🏼", "🤱🏽", "🤱🏾", "🤱🏿", "👩‍🍼", "👩🏻‍🍼", "👩🏼‍🍼", "👩🏽‍🍼", "👩🏾‍🍼", "👩🏿‍🍼", "👨‍🍼", "👨🏻‍🍼", "👨🏼‍🍼", "👨🏽‍🍼", "👨🏾‍🍼", "👨🏿‍🍼", "🧑‍🍼", "🧑🏻‍🍼", "🧑🏼‍🍼", "🧑🏽‍🍼", "🧑🏾‍🍼", "🧑🏿‍🍼", "👼", "👼🏻", "👼🏼", "👼🏽", "👼🏾", "👼🏿", "🎅", "🎅🏻", "🎅🏼", "🎅🏽", "🎅🏾", "🎅🏿", "🤶", "🤶🏻", "🤶🏼", "🤶🏽", "🤶🏾", "🤶🏿", "🧑‍🎄", "🧑🏻‍🎄", "🧑🏼‍🎄", "🧑🏽‍🎄", "🧑🏾‍🎄", "🧑🏿‍🎄", "🦸", "🦸🏻", "🦸🏼", "🦸🏽", "🦸🏾", "🦸🏿", "🦸‍♂️", "🦸‍♂", "🦸🏻‍♂️", "🦸🏻‍♂", "🦸🏼‍♂️", "🦸🏼‍♂", "🦸🏽‍♂️", "🦸🏽‍♂", "🦸🏾‍♂️", "🦸🏾‍♂", "🦸🏿‍♂️", "🦸🏿‍♂", "🦸‍♀️", "🦸‍♀", "🦸🏻‍♀️", "🦸🏻‍♀", "🦸🏼‍♀️", "🦸🏼‍♀", "🦸🏽‍♀️", "🦸🏽‍♀", "🦸🏾‍♀️", "🦸🏾‍♀", "🦸🏿‍♀️", "🦸🏿‍♀", "🦹", "🦹🏻", "🦹🏼", "🦹🏽", "🦹🏾", "🦹🏿", "🦹‍♂️", "🦹‍♂", "🦹🏻‍♂️", "🦹🏻‍♂", "🦹🏼‍♂️", "🦹🏼‍♂", "🦹🏽‍♂️", "🦹🏽‍♂", "🦹🏾‍♂️", "🦹🏾‍♂", "🦹🏿‍♂️", "🦹🏿‍♂", "🦹‍♀️", "🦹‍♀", "🦹🏻‍♀️", "🦹🏻‍♀", "🦹🏼‍♀️", "🦹🏼‍♀", "🦹🏽‍♀️", "🦹🏽‍♀", "🦹🏾‍♀️", "🦹🏾‍♀", "🦹🏿‍♀️", "🦹🏿‍♀", "🧙", "🧙🏻", "🧙🏼", "🧙🏽", "🧙🏾", "🧙🏿", "🧙‍♂️", "🧙‍♂", "🧙🏻‍♂️", "🧙🏻‍♂", "🧙🏼‍♂️", "🧙🏼‍♂", "🧙🏽‍♂️", "🧙🏽‍♂", "🧙🏾‍♂️", "🧙🏾‍♂", "🧙🏿‍♂️", "🧙🏿‍♂", "🧙‍♀️", "🧙‍♀", "🧙🏻‍♀️", "🧙🏻‍♀", "🧙🏼‍♀️", "🧙🏼‍♀", "🧙🏽‍♀️", "🧙🏽‍♀", "🧙🏾‍♀️", "🧙🏾‍♀", "🧙🏿‍♀️", "🧙🏿‍♀", "🧚", "🧚🏻", "🧚🏼", "🧚🏽", "🧚🏾", "🧚🏿", "🧚‍♂️", "🧚‍♂", "🧚🏻‍♂️", "🧚🏻‍♂", "🧚🏼‍♂️", "🧚🏼‍♂", "🧚🏽‍♂️", "🧚🏽‍♂", "🧚🏾‍♂️", "🧚🏾‍♂", "🧚🏿‍♂️", "🧚🏿‍♂", "🧚‍♀️", "🧚‍♀", "🧚🏻‍♀️", "🧚🏻‍♀", "🧚🏼‍♀️", "🧚🏼‍♀", "🧚🏽‍♀️", "🧚🏽‍♀", "🧚🏾‍♀️", "🧚🏾‍♀", "🧚🏿‍♀️", "🧚🏿‍♀", "🧛", "🧛🏻", "🧛🏼", "🧛🏽", "🧛🏾", "🧛🏿", "🧛‍♂️", "🧛‍♂", "🧛🏻‍♂️", "🧛🏻‍♂", "🧛🏼‍♂️", "🧛🏼‍♂", "🧛🏽‍♂️", "🧛🏽‍♂", "🧛🏾‍♂️", "🧛🏾‍♂", "🧛🏿‍♂️", "🧛🏿‍♂", "🧛‍♀️", "🧛‍♀", "🧛🏻‍♀️", "🧛🏻‍♀", "🧛🏼‍♀️", "🧛🏼‍♀", "🧛🏽‍♀️", "🧛🏽‍♀", "🧛🏾‍♀️", "🧛🏾‍♀", "🧛🏿‍♀️", "🧛🏿‍♀", "🧜", "🧜🏻", "🧜🏼", "🧜🏽", "🧜🏾", "🧜🏿", "🧜‍♂️", "🧜‍♂", "🧜🏻‍♂️", "🧜🏻‍♂", "🧜🏼‍♂️", "🧜🏼‍♂", "🧜🏽‍♂️", "🧜🏽‍♂", "🧜🏾‍♂️", "🧜🏾‍♂", "🧜🏿‍♂️", "🧜🏿‍♂", "🧜‍♀️", "🧜‍♀", "🧜🏻‍♀️", "🧜🏻‍♀", "🧜🏼‍♀️", "🧜🏼‍♀", "🧜🏽‍♀️", "🧜🏽‍♀", "🧜🏾‍♀️", "🧜🏾‍♀", "🧜🏿‍♀️", "🧜🏿‍♀", "🧝", "🧝🏻", "🧝🏼", "🧝🏽", "🧝🏾", "🧝🏿", "🧝‍♂️", "🧝‍♂", "🧝🏻‍♂️", "🧝🏻‍♂", "🧝🏼‍♂️", "🧝🏼‍♂", "🧝🏽‍♂️", "🧝🏽‍♂", "🧝🏾‍♂️", "🧝🏾‍♂", "🧝🏿‍♂️", "🧝🏿‍♂", "🧝‍♀️", "🧝‍♀", "🧝🏻‍♀️", "🧝🏻‍♀", "🧝🏼‍♀️", "🧝🏼‍♀", "🧝🏽‍♀️", "🧝🏽‍♀", "🧝🏾‍♀️", "🧝🏾‍♀", "🧝🏿‍♀️", "🧝🏿‍♀", "🧞", "🧞‍♂️", "🧞‍♂", "🧞‍♀️", "🧞‍♀", "🧟", "🧟‍♂️", "🧟‍♂", "🧟‍♀️", "🧟‍♀", "🧌", "💆", "💆🏻", "💆🏼", "💆🏽", "💆🏾", "💆🏿", "💆‍♂️", "💆‍♂", "💆🏻‍♂️", "💆🏻‍♂", "💆🏼‍♂️", "💆🏼‍♂", "💆🏽‍♂️", "💆🏽‍♂", "💆🏾‍♂️", "💆🏾‍♂", "💆🏿‍♂️", "💆🏿‍♂", "💆‍♀️", "💆‍♀", "💆🏻‍♀️", "💆🏻‍♀", "💆🏼‍♀️", "💆🏼‍♀", "💆🏽‍♀️", "💆🏽‍♀", "💆🏾‍♀️", "💆🏾‍♀", "💆🏿‍♀️", "💆🏿‍♀", "💇", "💇🏻", "💇🏼", "💇🏽", "💇🏾", "💇🏿", "💇‍♂️", "💇‍♂", "💇🏻‍♂️", "💇🏻‍♂", "💇🏼‍♂️", "💇🏼‍♂", "💇🏽‍♂️", "💇🏽‍♂", "💇🏾‍♂️", "💇🏾‍♂", "💇🏿‍♂️", "💇🏿‍♂", "💇‍♀️", "💇‍♀", "💇🏻‍♀️", "💇🏻‍♀", "💇🏼‍♀️", "💇🏼‍♀", "💇🏽‍♀️", "💇🏽‍♀", "💇🏾‍♀️", "💇🏾‍♀", "💇🏿‍♀️", "💇🏿‍♀", "🚶", "🚶🏻", "🚶🏼", "🚶🏽", "🚶🏾", "🚶🏿", "🚶‍♂️", "🚶‍♂", "🚶🏻‍♂️", "🚶🏻‍♂", "🚶🏼‍♂️", "🚶🏼‍♂", "🚶🏽‍♂️", "🚶🏽‍♂", "🚶🏾‍♂️", "🚶🏾‍♂", "🚶🏿‍♂️", "🚶🏿‍♂", "🚶‍♀️", "🚶‍♀", "🚶🏻‍♀️", "🚶🏻‍♀", "🚶🏼‍♀️", "🚶🏼‍♀", "🚶🏽‍♀️", "🚶🏽‍♀", "🚶🏾‍♀️", "🚶🏾‍♀", "🚶🏿‍♀️", "🚶🏿‍♀", "🧍", "🧍🏻", "🧍🏼", "🧍🏽", "🧍🏾", "🧍🏿", "🧍‍♂️", "🧍‍♂", "🧍🏻‍♂️", "🧍🏻‍♂", "🧍🏼‍♂️", "🧍🏼‍♂", "🧍🏽‍♂️", "🧍🏽‍♂", "🧍🏾‍♂️", "🧍🏾‍♂", "🧍🏿‍♂️", "🧍🏿‍♂", "🧍‍♀️", "🧍‍♀", "🧍🏻‍♀️", "🧍🏻‍♀", "🧍🏼‍♀️", "🧍🏼‍♀", "🧍🏽‍♀️", "🧍🏽‍♀", "🧍🏾‍♀️", "🧍🏾‍♀", "🧍🏿‍♀️", "🧍🏿‍♀", "🧎", "🧎🏻", "🧎🏼", "🧎🏽", "🧎🏾", "🧎🏿", "🧎‍♂️", "🧎‍♂", "🧎🏻‍♂️", "🧎🏻‍♂", "🧎🏼‍♂️", "🧎🏼‍♂", "🧎🏽‍♂️", "🧎🏽‍♂", "🧎🏾‍♂️", "🧎🏾‍♂", "🧎🏿‍♂️", "🧎🏿‍♂", "🧎‍♀️", "🧎‍♀", "🧎🏻‍♀️", "🧎🏻‍♀", "🧎🏼‍♀️", "🧎🏼‍♀", "🧎🏽‍♀️", "🧎🏽‍♀", "🧎🏾‍♀️", "🧎🏾‍♀", "🧎🏿‍♀️", "🧎🏿‍♀", "🧑‍🦯", "🧑🏻‍🦯", "🧑🏼‍🦯", "🧑🏽‍🦯", "🧑🏾‍🦯", "🧑🏿‍🦯", "👨‍🦯", "👨🏻‍🦯", "👨🏼‍🦯", "👨🏽‍🦯", "👨🏾‍🦯", "👨🏿‍🦯", "👩‍🦯", "👩🏻‍🦯", "👩🏼‍🦯", "👩🏽‍🦯", "👩🏾‍🦯", "👩🏿‍🦯", "🧑‍🦼", "🧑🏻‍🦼", "🧑🏼‍🦼", "🧑🏽‍🦼", "🧑🏾‍🦼", "🧑🏿‍🦼", "👨‍🦼", "👨🏻‍🦼", "👨🏼‍🦼", "👨🏽‍🦼", "👨🏾‍🦼", "👨🏿‍🦼", "👩‍🦼", "👩🏻‍🦼", "👩🏼‍🦼", "👩🏽‍🦼", "👩🏾‍🦼", "👩🏿‍🦼", "🧑‍🦽", "🧑🏻‍🦽", "🧑🏼‍🦽", "🧑🏽‍🦽", "🧑🏾‍🦽", "🧑🏿‍🦽", "👨‍🦽", "👨🏻‍🦽", "👨🏼‍🦽", "👨🏽‍🦽", "👨🏾‍🦽", "👨🏿‍🦽", "👩‍🦽", "👩🏻‍🦽", "👩🏼‍🦽", "👩🏽‍🦽", "👩🏾‍🦽", "👩🏿‍🦽", "🏃", "🏃🏻", "🏃🏼", "🏃🏽", "🏃🏾", "🏃🏿", "🏃‍♂️", "🏃‍♂", "🏃🏻‍♂️", "🏃🏻‍♂", "🏃🏼‍♂️", "🏃🏼‍♂", "🏃🏽‍♂️", "🏃🏽‍♂", "🏃🏾‍♂️", "🏃🏾‍♂", "🏃🏿‍♂️", "🏃🏿‍♂", "🏃‍♀️", "🏃‍♀", "🏃🏻‍♀️", "🏃🏻‍♀", "🏃🏼‍♀️", "🏃🏼‍♀", "🏃🏽‍♀️", "🏃🏽‍♀", "🏃🏾‍♀️", "🏃🏾‍♀", "🏃🏿‍♀️", "🏃🏿‍♀", "💃", "💃🏻", "💃🏼", "💃🏽", "💃🏾", "💃🏿", "🕺", "🕺🏻", "🕺🏼", "🕺🏽", "🕺🏾", "🕺🏿", "🕴️", "🕴", "🕴🏻", "🕴🏼", "🕴🏽", "🕴🏾", "🕴🏿", "👯", "👯‍♂️", "👯‍♂", "👯‍♀️", "👯‍♀", "🧖", "🧖🏻", "🧖🏼", "🧖🏽", "🧖🏾", "🧖🏿", "🧖‍♂️", "🧖‍♂", "🧖🏻‍♂️", "🧖🏻‍♂", "🧖🏼‍♂️", "🧖🏼‍♂", "🧖🏽‍♂️", "🧖🏽‍♂", "🧖🏾‍♂️", "🧖🏾‍♂", "🧖🏿‍♂️", "🧖🏿‍♂", "🧖‍♀️", "🧖‍♀", "🧖🏻‍♀️", "🧖🏻‍♀", "🧖🏼‍♀️", "🧖🏼‍♀", "🧖🏽‍♀️", "🧖🏽‍♀", "🧖🏾‍♀️", "🧖🏾‍♀", "🧖🏿‍♀️", "🧖🏿‍♀", "🧗", "🧗🏻", "🧗🏼", "🧗🏽", "🧗🏾", "🧗🏿", "🧗‍♂️", "🧗‍♂", "🧗🏻‍♂️", "🧗🏻‍♂", "🧗🏼‍♂️", "🧗🏼‍♂", "🧗🏽‍♂️", "🧗🏽‍♂", "🧗🏾‍♂️", "🧗🏾‍♂", "🧗🏿‍♂️", "🧗🏿‍♂", "🧗‍♀️", "🧗‍♀", "🧗🏻‍♀️", "🧗🏻‍♀", "🧗🏼‍♀️", "🧗🏼‍♀", "🧗🏽‍♀️", "🧗🏽‍♀", "🧗🏾‍♀️", "🧗🏾‍♀", "🧗🏿‍♀️", "🧗🏿‍♀", "🤺", "🏇", "🏇🏻", "🏇🏼", "🏇🏽", "🏇🏾", "🏇🏿", "⛷️", "⛷", "🏂", "🏂🏻", "🏂🏼", "🏂🏽", "🏂🏾", "🏂🏿", "🏌️", "🏌", "🏌🏻", "🏌🏼", "🏌🏽", "🏌🏾", "🏌🏿", "🏌️‍♂️", "🏌‍♂️", "🏌️‍♂", "🏌‍♂", "🏌🏻‍♂️", "🏌🏻‍♂", "🏌🏼‍♂️", "🏌🏼‍♂", "🏌🏽‍♂️", "🏌🏽‍♂", "🏌🏾‍♂️", "🏌🏾‍♂", "🏌🏿‍♂️", "🏌🏿‍♂", "🏌️‍♀️", "🏌‍♀️", "🏌️‍♀", "🏌‍♀", "🏌🏻‍♀️", "🏌🏻‍♀", "🏌🏼‍♀️", "🏌🏼‍♀", "🏌🏽‍♀️", "🏌🏽‍♀", "🏌🏾‍♀️", "🏌🏾‍♀", "🏌🏿‍♀️", "🏌🏿‍♀", "🏄", "🏄🏻", "🏄🏼", "🏄🏽", "🏄🏾", "🏄🏿", "🏄‍♂️", "🏄‍♂", "🏄🏻‍♂️", "🏄🏻‍♂", "🏄🏼‍♂️", "🏄🏼‍♂", "🏄🏽‍♂️", "🏄🏽‍♂", "🏄🏾‍♂️", "🏄🏾‍♂", "🏄🏿‍♂️", "🏄🏿‍♂", "🏄‍♀️", "🏄‍♀", "🏄🏻‍♀️", "🏄🏻‍♀", "🏄🏼‍♀️", "🏄🏼‍♀", "🏄🏽‍♀️", "🏄🏽‍♀", "🏄🏾‍♀️", "🏄🏾‍♀", "🏄🏿‍♀️", "🏄🏿‍♀", "🚣", "🚣🏻", "🚣🏼", "🚣🏽", "🚣🏾", "🚣🏿", "🚣‍♂️", "🚣‍♂", "🚣🏻‍♂️", "🚣🏻‍♂", "🚣🏼‍♂️", "🚣🏼‍♂", "🚣🏽‍♂️", "🚣🏽‍♂", "🚣🏾‍♂️", "🚣🏾‍♂", "🚣🏿‍♂️", "🚣🏿‍♂", "🚣‍♀️", "🚣‍♀", "🚣🏻‍♀️", "🚣🏻‍♀", "🚣🏼‍♀️", "🚣🏼‍♀", "🚣🏽‍♀️", "🚣🏽‍♀", "🚣🏾‍♀️", "🚣🏾‍♀", "🚣🏿‍♀️", "🚣🏿‍♀", "🏊", "🏊🏻", "🏊🏼", "🏊🏽", "🏊🏾", "🏊🏿", "🏊‍♂️", "🏊‍♂", "🏊🏻‍♂️", "🏊🏻‍♂", "🏊🏼‍♂️", "🏊🏼‍♂", "🏊🏽‍♂️", "🏊🏽‍♂", "🏊🏾‍♂️", "🏊🏾‍♂", "🏊🏿‍♂️", "🏊🏿‍♂", "🏊‍♀️", "🏊‍♀", "🏊🏻‍♀️", "🏊🏻‍♀", "🏊🏼‍♀️", "🏊🏼‍♀", "🏊🏽‍♀️", "🏊🏽‍♀", "🏊🏾‍♀️", "🏊🏾‍♀", "🏊🏿‍♀️", "🏊🏿‍♀", "⛹️", "⛹", "⛹🏻", "⛹🏼", "⛹🏽", "⛹🏾", "⛹🏿", "⛹️‍♂️", "⛹‍♂️", "⛹️‍♂", "⛹‍♂", "⛹🏻‍♂️", "⛹🏻‍♂", "⛹🏼‍♂️", "⛹🏼‍♂", "⛹🏽‍♂️", "⛹🏽‍♂", "⛹🏾‍♂️", "⛹🏾‍♂", "⛹🏿‍♂️", "⛹🏿‍♂", "⛹️‍♀️", "⛹‍♀️", "⛹️‍♀", "⛹‍♀", "⛹🏻‍♀️", "⛹🏻‍♀", "⛹🏼‍♀️", "⛹🏼‍♀", "⛹🏽‍♀️", "⛹🏽‍♀", "⛹🏾‍♀️", "⛹🏾‍♀", "⛹🏿‍♀️", "⛹🏿‍♀", "🏋️", "🏋", "🏋🏻", "🏋🏼", "🏋🏽", "🏋🏾", "🏋🏿", "🏋️‍♂️", "🏋‍♂️", "🏋️‍♂", "🏋‍♂", "🏋🏻‍♂️", "🏋🏻‍♂", "🏋🏼‍♂️", "🏋🏼‍♂", "🏋🏽‍♂️", "🏋🏽‍♂", "🏋🏾‍♂️", "🏋🏾‍♂", "🏋🏿‍♂️", "🏋🏿‍♂", "🏋️‍♀️", "🏋‍♀️", "🏋️‍♀", "🏋‍♀", "🏋🏻‍♀️", "🏋🏻‍♀", "🏋🏼‍♀️", "🏋🏼‍♀", "🏋🏽‍♀️", "🏋🏽‍♀", "🏋🏾‍♀️", "🏋🏾‍♀", "🏋🏿‍♀️", "🏋🏿‍♀", "🚴", "🚴🏻", "🚴🏼", "🚴🏽", "🚴🏾", "🚴🏿", "🚴‍♂️", "🚴‍♂", "🚴🏻‍♂️", "🚴🏻‍♂", "🚴🏼‍♂️", "🚴🏼‍♂", "🚴🏽‍♂️", "🚴🏽‍♂", "🚴🏾‍♂️", "🚴🏾‍♂", "🚴🏿‍♂️", "🚴🏿‍♂", "🚴‍♀️", "🚴‍♀", "🚴🏻‍♀️", "🚴🏻‍♀", "🚴🏼‍♀️", "🚴🏼‍♀", "🚴🏽‍♀️", "🚴🏽‍♀", "🚴🏾‍♀️", "🚴🏾‍♀", "🚴🏿‍♀️", "🚴🏿‍♀", "🚵", "🚵🏻", "🚵🏼", "🚵🏽", "🚵🏾", "🚵🏿", "🚵‍♂️", "🚵‍♂", "🚵🏻‍♂️", "🚵🏻‍♂", "🚵🏼‍♂️", "🚵🏼‍♂", "🚵🏽‍♂️", "🚵🏽‍♂", "🚵🏾‍♂️", "🚵🏾‍♂", "🚵🏿‍♂️", "🚵🏿‍♂", "🚵‍♀️", "🚵‍♀", "🚵🏻‍♀️", "🚵🏻‍♀", "🚵🏼‍♀️", "🚵🏼‍♀", "🚵🏽‍♀️", "🚵🏽‍♀", "🚵🏾‍♀️", "🚵🏾‍♀", "🚵🏿‍♀️", "🚵🏿‍♀", "🤸", "🤸🏻", "🤸🏼", "🤸🏽", "🤸🏾", "🤸🏿", "🤸‍♂️", "🤸‍♂", "🤸🏻‍♂️", "🤸🏻‍♂", "🤸🏼‍♂️", "🤸🏼‍♂", "🤸🏽‍♂️", "🤸🏽‍♂", "🤸🏾‍♂️", "🤸🏾‍♂", "🤸🏿‍♂️", "🤸🏿‍♂", "🤸‍♀️", "🤸‍♀", "🤸🏻‍♀️", "🤸🏻‍♀", "🤸🏼‍♀️", "🤸🏼‍♀", "🤸🏽‍♀️", "🤸🏽‍♀", "🤸🏾‍♀️", "🤸🏾‍♀", "🤸🏿‍♀️", "🤸🏿‍♀", "🤼", "🤼‍♂️", "🤼‍♂", "🤼‍♀️", "🤼‍♀", "🤽", "🤽🏻", "🤽🏼", "🤽🏽", "🤽🏾", "🤽🏿", "🤽‍♂️", "🤽‍♂", "🤽🏻‍♂️", "🤽🏻‍♂", "🤽🏼‍♂️", "🤽🏼‍♂", "🤽🏽‍♂️", "🤽🏽‍♂", "🤽🏾‍♂️", "🤽🏾‍♂", "🤽🏿‍♂️", "🤽🏿‍♂", "🤽‍♀️", "🤽‍♀", "🤽🏻‍♀️", "🤽🏻‍♀", "🤽🏼‍♀️", "🤽🏼‍♀", "🤽🏽‍♀️", "🤽🏽‍♀", "🤽🏾‍♀️", "🤽🏾‍♀", "🤽🏿‍♀️", "🤽🏿‍♀", "🤾", "🤾🏻", "🤾🏼", "🤾🏽", "🤾🏾", "🤾🏿", "🤾‍♂️", "🤾‍♂", "🤾🏻‍♂️", "🤾🏻‍♂", "🤾🏼‍♂️", "🤾🏼‍♂", "🤾🏽‍♂️", "🤾🏽‍♂", "🤾🏾‍♂️", "🤾🏾‍♂", "🤾🏿‍♂️", "🤾🏿‍♂", "🤾‍♀️", "🤾‍♀", "🤾🏻‍♀️", "🤾🏻‍♀", "🤾🏼‍♀️", "🤾🏼‍♀", "🤾🏽‍♀️", "🤾🏽‍♀", "🤾🏾‍♀️", "🤾🏾‍♀", "🤾🏿‍♀️", "🤾🏿‍♀", "🤹", "🤹🏻", "🤹🏼", "🤹🏽", "🤹🏾", "🤹🏿", "🤹‍♂️", "🤹‍♂", "🤹🏻‍♂️", "🤹🏻‍♂", "🤹🏼‍♂️", "🤹🏼‍♂", "🤹🏽‍♂️", "🤹🏽‍♂", "🤹🏾‍♂️", "🤹🏾‍♂", "🤹🏿‍♂️", "🤹🏿‍♂", "🤹‍♀️", "🤹‍♀", "🤹🏻‍♀️", "🤹🏻‍♀", "🤹🏼‍♀️", "🤹🏼‍♀", "🤹🏽‍♀️", "🤹🏽‍♀", "🤹🏾‍♀️", "🤹🏾‍♀", "🤹🏿‍♀️", "🤹🏿‍♀", "🧘", "🧘🏻", "🧘🏼", "🧘🏽", "🧘🏾", "🧘🏿", "🧘‍♂️", "🧘‍♂", "🧘🏻‍♂️", "🧘🏻‍♂", "🧘🏼‍♂️", "🧘🏼‍♂", "🧘🏽‍♂️", "🧘🏽‍♂", "🧘🏾‍♂️", "🧘🏾‍♂", "🧘🏿‍♂️", "🧘🏿‍♂", "🧘‍♀️", "🧘‍♀", "🧘🏻‍♀️", "🧘🏻‍♀", "🧘🏼‍♀️", "🧘🏼‍♀", "🧘🏽‍♀️", "🧘🏽‍♀", "🧘🏾‍♀️", "🧘🏾‍♀", "🧘🏿‍♀️", "🧘🏿‍♀", "🛀", "🛀🏻", "🛀🏼", "🛀🏽", "🛀🏾", "🛀🏿", "🛌", "🛌🏻", "🛌🏼", "🛌🏽", "🛌🏾", "🛌🏿", "🧑‍🤝‍🧑", "🧑🏻‍🤝‍🧑🏻", "🧑🏻‍🤝‍🧑🏼", "🧑🏻‍🤝‍🧑🏽", "🧑🏻‍🤝‍🧑🏾", "🧑🏻‍🤝‍🧑🏿", "🧑🏼‍🤝‍🧑🏻", "🧑🏼‍🤝‍🧑🏼", "🧑🏼‍🤝‍🧑🏽", "🧑🏼‍🤝‍🧑🏾", "🧑🏼‍🤝‍🧑🏿", "🧑🏽‍🤝‍🧑🏻", "🧑🏽‍🤝‍🧑🏼", "🧑🏽‍🤝‍🧑🏽", "🧑🏽‍🤝‍🧑🏾", "🧑🏽‍🤝‍🧑🏿", "🧑🏾‍🤝‍🧑🏻", "🧑🏾‍🤝‍🧑🏼", "🧑🏾‍🤝‍🧑🏽", "🧑🏾‍🤝‍🧑🏾", "🧑🏾‍🤝‍🧑🏿", "🧑🏿‍🤝‍🧑🏻", "🧑🏿‍🤝‍🧑🏼", "🧑🏿‍🤝‍🧑🏽", "🧑🏿‍🤝‍🧑🏾", "🧑🏿‍🤝‍🧑🏿", "👭", "👭🏻", "👩🏻‍🤝‍👩🏼", "👩🏻‍🤝‍👩🏽", "👩🏻‍🤝‍👩🏾", "👩🏻‍🤝‍👩🏿", "👩🏼‍🤝‍👩🏻", "👭🏼", "👩🏼‍🤝‍👩🏽", "👩🏼‍🤝‍👩🏾", "👩🏼‍🤝‍👩🏿", "👩🏽‍🤝‍👩🏻", "👩🏽‍🤝‍👩🏼", "👭🏽", "👩🏽‍🤝‍👩🏾", "👩🏽‍🤝‍👩🏿", "👩🏾‍🤝‍👩🏻", "👩🏾‍🤝‍👩🏼", "👩🏾‍🤝‍👩🏽", "👭🏾", "👩🏾‍🤝‍👩🏿", "👩🏿‍🤝‍👩🏻", "👩🏿‍🤝‍👩🏼", "👩🏿‍🤝‍👩🏽", "👩🏿‍🤝‍👩🏾", "👭🏿", "👫", "👫🏻", "👩🏻‍🤝‍👨🏼", "👩🏻‍🤝‍👨🏽", "👩🏻‍🤝‍👨🏾", "👩🏻‍🤝‍👨🏿", "👩🏼‍🤝‍👨🏻", "👫🏼", "👩🏼‍🤝‍👨🏽", "👩🏼‍🤝‍👨🏾", "👩🏼‍🤝‍👨🏿", "👩🏽‍🤝‍👨🏻", "👩🏽‍🤝‍👨🏼", "👫🏽", "👩🏽‍🤝‍👨🏾", "👩🏽‍🤝‍👨🏿", "👩🏾‍🤝‍👨🏻", "👩🏾‍🤝‍👨🏼", "👩🏾‍🤝‍👨🏽", "👫🏾", "👩🏾‍🤝‍👨🏿", "👩🏿‍🤝‍👨🏻", "👩🏿‍🤝‍👨🏼", "👩🏿‍🤝‍👨🏽", "👩🏿‍🤝‍👨🏾", "👫🏿", "👬", "👬🏻", "👨🏻‍🤝‍👨🏼", "👨🏻‍🤝‍👨🏽", "👨🏻‍🤝‍👨🏾", "👨🏻‍🤝‍👨🏿", "👨🏼‍🤝‍👨🏻", "👬🏼", "👨🏼‍🤝‍👨🏽", "👨🏼‍🤝‍👨🏾", "👨🏼‍🤝‍👨🏿", "👨🏽‍🤝‍👨🏻", "👨🏽‍🤝‍👨🏼", "👬🏽", "👨🏽‍🤝‍👨🏾", "👨🏽‍🤝‍👨🏿", "👨🏾‍🤝‍👨🏻", "👨🏾‍🤝‍👨🏼", "👨🏾‍🤝‍👨🏽", "👬🏾", "👨🏾‍🤝‍👨🏿", "👨🏿‍🤝‍👨🏻", "👨🏿‍🤝‍👨🏼", "👨🏿‍🤝‍👨🏽", "👨🏿‍🤝‍👨🏾", "👬🏿", "💏", "💏🏻", "💏🏼", "💏🏽", "💏🏾", "💏🏿", "🧑🏻‍❤️‍💋‍🧑🏼", "🧑🏻‍❤‍💋‍🧑🏼", "🧑🏻‍❤️‍💋‍🧑🏽", "🧑🏻‍❤‍💋‍🧑🏽", "🧑🏻‍❤️‍💋‍🧑🏾", "🧑🏻‍❤‍💋‍🧑🏾", "🧑🏻‍❤️‍💋‍🧑🏿", "🧑🏻‍❤‍💋‍🧑🏿", "🧑🏼‍❤️‍💋‍🧑🏻", "🧑🏼‍❤‍💋‍🧑🏻", "🧑🏼‍❤️‍💋‍🧑🏽", "🧑🏼‍❤‍💋‍🧑🏽", "🧑🏼‍❤️‍💋‍🧑🏾", "🧑🏼‍❤‍💋‍🧑🏾", "🧑🏼‍❤️‍💋‍🧑🏿", "🧑🏼‍❤‍💋‍🧑🏿", "🧑🏽‍❤️‍💋‍🧑🏻", "🧑🏽‍❤‍💋‍🧑🏻", "🧑🏽‍❤️‍💋‍🧑🏼", "🧑🏽‍❤‍💋‍🧑🏼", "🧑🏽‍❤️‍💋‍🧑🏾", "🧑🏽‍❤‍💋‍🧑🏾", "🧑🏽‍❤️‍💋‍🧑🏿", "🧑🏽‍❤‍💋‍🧑🏿", "🧑🏾‍❤️‍💋‍🧑🏻", "🧑🏾‍❤‍💋‍🧑🏻", "🧑🏾‍❤️‍💋‍🧑🏼", "🧑🏾‍❤‍💋‍🧑🏼", "🧑🏾‍❤️‍💋‍🧑🏽", "🧑🏾‍❤‍💋‍🧑🏽", "🧑🏾‍❤️‍💋‍🧑🏿", "🧑🏾‍❤‍💋‍🧑🏿", "🧑🏿‍❤️‍💋‍🧑🏻", "🧑🏿‍❤‍💋‍🧑🏻", "🧑🏿‍❤️‍💋‍🧑🏼", "🧑🏿‍❤‍💋‍🧑🏼", "🧑🏿‍❤️‍💋‍🧑🏽", "🧑🏿‍❤‍💋‍🧑🏽", "🧑🏿‍❤️‍💋‍🧑🏾", "🧑🏿‍❤‍💋‍🧑🏾", "👩‍❤️‍💋‍👨", "👩‍❤‍💋‍👨", "👩🏻‍❤️‍💋‍👨🏻", "👩🏻‍❤‍💋‍👨🏻", "👩🏻‍❤️‍💋‍👨🏼", "👩🏻‍❤‍💋‍👨🏼", "👩🏻‍❤️‍💋‍👨🏽", "👩🏻‍❤‍💋‍👨🏽", "👩🏻‍❤️‍💋‍👨🏾", "👩🏻‍❤‍💋‍👨🏾", "👩🏻‍❤️‍💋‍👨🏿", "👩🏻‍❤‍💋‍👨🏿", "👩🏼‍❤️‍💋‍👨🏻", "👩🏼‍❤‍💋‍👨🏻", "👩🏼‍❤️‍💋‍👨🏼", "👩🏼‍❤‍💋‍👨🏼", "👩🏼‍❤️‍💋‍👨🏽", "👩🏼‍❤‍💋‍👨🏽", "👩🏼‍❤️‍💋‍👨🏾", "👩🏼‍❤‍💋‍👨🏾", "👩🏼‍❤️‍💋‍👨🏿", "👩🏼‍❤‍💋‍👨🏿", "👩🏽‍❤️‍💋‍👨🏻", "👩🏽‍❤‍💋‍👨🏻", "👩🏽‍❤️‍💋‍👨🏼", "👩🏽‍❤‍💋‍👨🏼", "👩🏽‍❤️‍💋‍👨🏽", "👩🏽‍❤‍💋‍👨🏽", "👩🏽‍❤️‍💋‍👨🏾", "👩🏽‍❤‍💋‍👨🏾", "👩🏽‍❤️‍💋‍👨🏿", "👩🏽‍❤‍💋‍👨🏿", "👩🏾‍❤️‍💋‍👨🏻", "👩🏾‍❤‍💋‍👨🏻", "👩🏾‍❤️‍💋‍👨🏼", "👩🏾‍❤‍💋‍👨🏼", "👩🏾‍❤️‍💋‍👨🏽", "👩🏾‍❤‍💋‍👨🏽", "👩🏾‍❤️‍💋‍👨🏾", "👩🏾‍❤‍💋‍👨🏾", "👩🏾‍❤️‍💋‍👨🏿", "👩🏾‍❤‍💋‍👨🏿", "👩🏿‍❤️‍💋‍👨🏻", "👩🏿‍❤‍💋‍👨🏻", "👩🏿‍❤️‍💋‍👨🏼", "👩🏿‍❤‍💋‍👨🏼", "👩🏿‍❤️‍💋‍👨🏽", "👩🏿‍❤‍💋‍👨🏽", "👩🏿‍❤️‍💋‍👨🏾", "👩🏿‍❤‍💋‍👨🏾", "👩🏿‍❤️‍💋‍👨🏿", "👩🏿‍❤‍💋‍👨🏿", "👨‍❤️‍💋‍👨", "👨‍❤‍💋‍👨", "👨🏻‍❤️‍💋‍👨🏻", "👨🏻‍❤‍💋‍👨🏻", "👨🏻‍❤️‍💋‍👨🏼", "👨🏻‍❤‍💋‍👨🏼", "👨🏻‍❤️‍💋‍👨🏽", "👨🏻‍❤‍💋‍👨🏽", "👨🏻‍❤️‍💋‍👨🏾", "👨🏻‍❤‍💋‍👨🏾", "👨🏻‍❤️‍💋‍👨🏿", "👨🏻‍❤‍💋‍👨🏿", "👨🏼‍❤️‍💋‍👨🏻", "👨🏼‍❤‍💋‍👨🏻", "👨🏼‍❤️‍💋‍👨🏼", "👨🏼‍❤‍💋‍👨🏼", "👨🏼‍❤️‍💋‍👨🏽", "👨🏼‍❤‍💋‍👨🏽", "👨🏼‍❤️‍💋‍👨🏾", "👨🏼‍❤‍💋‍👨🏾", "👨🏼‍❤️‍💋‍👨🏿", "👨🏼‍❤‍💋‍👨🏿", "👨🏽‍❤️‍💋‍👨🏻", "👨🏽‍❤‍💋‍👨🏻", "👨🏽‍❤️‍💋‍👨🏼", "👨🏽‍❤‍💋‍👨🏼", "👨🏽‍❤️‍💋‍👨🏽", "👨🏽‍❤‍💋‍👨🏽", "👨🏽‍❤️‍💋‍👨🏾", "👨🏽‍❤‍💋‍👨🏾", "👨🏽‍❤️‍💋‍👨🏿", "👨🏽‍❤‍💋‍👨🏿", "👨🏾‍❤️‍💋‍👨🏻", "👨🏾‍❤‍💋‍👨🏻", "👨🏾‍❤️‍💋‍👨🏼", "👨🏾‍❤‍💋‍👨🏼", "👨🏾‍❤️‍💋‍👨🏽", "👨🏾‍❤‍💋‍👨🏽", "👨🏾‍❤️‍💋‍👨🏾", "👨🏾‍❤‍💋‍👨🏾", "👨🏾‍❤️‍💋‍👨🏿", "👨🏾‍❤‍💋‍👨🏿", "👨🏿‍❤️‍💋‍👨🏻", "👨🏿‍❤‍💋‍👨🏻", "👨🏿‍❤️‍💋‍👨🏼", "👨🏿‍❤‍💋‍👨🏼", "👨🏿‍❤️‍💋‍👨🏽", "👨🏿‍❤‍💋‍👨🏽", "👨🏿‍❤️‍💋‍👨🏾", "👨🏿‍❤‍💋‍👨🏾", "👨🏿‍❤️‍💋‍👨🏿", "👨🏿‍❤‍💋‍👨🏿", "👩‍❤️‍💋‍👩", "👩‍❤‍💋‍👩", "👩🏻‍❤️‍💋‍👩🏻", "👩🏻‍❤‍💋‍👩🏻", "👩🏻‍❤️‍💋‍👩🏼", "👩🏻‍❤‍💋‍👩🏼", "👩🏻‍❤️‍💋‍👩🏽", "👩🏻‍❤‍💋‍👩🏽", "👩🏻‍❤️‍💋‍👩🏾", "👩🏻‍❤‍💋‍👩🏾", "👩🏻‍❤️‍💋‍👩🏿", "👩🏻‍❤‍💋‍👩🏿", "👩🏼‍❤️‍💋‍👩🏻", "👩🏼‍❤‍💋‍👩🏻", "👩🏼‍❤️‍💋‍👩🏼", "👩🏼‍❤‍💋‍👩🏼", "👩🏼‍❤️‍💋‍👩🏽", "👩🏼‍❤‍💋‍👩🏽", "👩🏼‍❤️‍💋‍👩🏾", "👩🏼‍❤‍💋‍👩🏾", "👩🏼‍❤️‍💋‍👩🏿", "👩🏼‍❤‍💋‍👩🏿", "👩🏽‍❤️‍💋‍👩🏻", "👩🏽‍❤‍💋‍👩🏻", "👩🏽‍❤️‍💋‍👩🏼", "👩🏽‍❤‍💋‍👩🏼", "👩🏽‍❤️‍💋‍👩🏽", "👩🏽‍❤‍💋‍👩🏽", "👩🏽‍❤️‍💋‍👩🏾", "👩🏽‍❤‍💋‍👩🏾", "👩🏽‍❤️‍💋‍👩🏿", "👩🏽‍❤‍💋‍👩🏿", "👩🏾‍❤️‍💋‍👩🏻", "👩🏾‍❤‍💋‍👩🏻", "👩🏾‍❤️‍💋‍👩🏼", "👩🏾‍❤‍💋‍👩🏼", "👩🏾‍❤️‍💋‍👩🏽", "👩🏾‍❤‍💋‍👩🏽", "👩🏾‍❤️‍💋‍👩🏾", "👩🏾‍❤‍💋‍👩🏾", "👩🏾‍❤️‍💋‍👩🏿", "👩🏾‍❤‍💋‍👩🏿", "👩🏿‍❤️‍💋‍👩🏻", "👩🏿‍❤‍💋‍👩🏻", "👩🏿‍❤️‍💋‍👩🏼", "👩🏿‍❤‍💋‍👩🏼", "👩🏿‍❤️‍💋‍👩🏽", "👩🏿‍❤‍💋‍👩🏽", "👩🏿‍❤️‍💋‍👩🏾", "👩🏿‍❤‍💋‍👩🏾", "👩🏿‍❤️‍💋‍👩🏿", "👩🏿‍❤‍💋‍👩🏿", "💑", "💑🏻", "💑🏼", "💑🏽", "💑🏾", "💑🏿", "🧑🏻‍❤️‍🧑🏼", "🧑🏻‍❤‍🧑🏼", "🧑🏻‍❤️‍🧑🏽", "🧑🏻‍❤‍🧑🏽", "🧑🏻‍❤️‍🧑🏾", "🧑🏻‍❤‍🧑🏾", "🧑🏻‍❤️‍🧑🏿", "🧑🏻‍❤‍🧑🏿", "🧑🏼‍❤️‍🧑🏻", "🧑🏼‍❤‍🧑🏻", "🧑🏼‍❤️‍🧑🏽", "🧑🏼‍❤‍🧑🏽", "🧑🏼‍❤️‍🧑🏾", "🧑🏼‍❤‍🧑🏾", "🧑🏼‍❤️‍🧑🏿", "🧑🏼‍❤‍🧑🏿", "🧑🏽‍❤️‍🧑🏻", "🧑🏽‍❤‍🧑🏻", "🧑🏽‍❤️‍🧑🏼", "🧑🏽‍❤‍🧑🏼", "🧑🏽‍❤️‍🧑🏾", "🧑🏽‍❤‍🧑🏾", "🧑🏽‍❤️‍🧑🏿", "🧑🏽‍❤‍🧑🏿", "🧑🏾‍❤️‍🧑🏻", "🧑🏾‍❤‍🧑🏻", "🧑🏾‍❤️‍🧑🏼", "🧑🏾‍❤‍🧑🏼", "🧑🏾‍❤️‍🧑🏽", "🧑🏾‍❤‍🧑🏽", "🧑🏾‍❤️‍🧑🏿", "🧑🏾‍❤‍🧑🏿", "🧑🏿‍❤️‍🧑🏻", "🧑🏿‍❤‍🧑🏻", "🧑🏿‍❤️‍🧑🏼", "🧑🏿‍❤‍🧑🏼", "🧑🏿‍❤️‍🧑🏽", "🧑🏿‍❤‍🧑🏽", "🧑🏿‍❤️‍🧑🏾", "🧑🏿‍❤‍🧑🏾", "👩‍❤️‍👨", "👩‍❤‍👨", "👩🏻‍❤️‍👨🏻", "👩🏻‍❤‍👨🏻", "👩🏻‍❤️‍👨🏼", "👩🏻‍❤‍👨🏼", "👩🏻‍❤️‍👨🏽", "👩🏻‍❤‍👨🏽", "👩🏻‍❤️‍👨🏾", "👩🏻‍❤‍👨🏾", "👩🏻‍❤️‍👨🏿", "👩🏻‍❤‍👨🏿", "👩🏼‍❤️‍👨🏻", "👩🏼‍❤‍👨🏻", "👩🏼‍❤️‍👨🏼", "👩🏼‍❤‍👨🏼", "👩🏼‍❤️‍👨🏽", "👩🏼‍❤‍👨🏽", "👩🏼‍❤️‍👨🏾", "👩🏼‍❤‍👨🏾", "👩🏼‍❤️‍👨🏿", "👩🏼‍❤‍👨🏿", "👩🏽‍❤️‍👨🏻", "👩🏽‍❤‍👨🏻", "👩🏽‍❤️‍👨🏼", "👩🏽‍❤‍👨🏼", "👩🏽‍❤️‍👨🏽", "👩🏽‍❤‍👨🏽", "👩🏽‍❤️‍👨🏾", "👩🏽‍❤‍👨🏾", "👩🏽‍❤️‍👨🏿", "👩🏽‍❤‍👨🏿", "👩🏾‍❤️‍👨🏻", "👩🏾‍❤‍👨🏻", "👩🏾‍❤️‍👨🏼", "👩🏾‍❤‍👨🏼", "👩🏾‍❤️‍👨🏽", "👩🏾‍❤‍👨🏽", "👩🏾‍❤️‍👨🏾", "👩🏾‍❤‍👨🏾", "👩🏾‍❤️‍👨🏿", "👩🏾‍❤‍👨🏿", "👩🏿‍❤️‍👨🏻", "👩🏿‍❤‍👨🏻", "👩🏿‍❤️‍👨🏼", "👩🏿‍❤‍👨🏼", "👩🏿‍❤️‍👨🏽", "👩🏿‍❤‍👨🏽", "👩🏿‍❤️‍👨🏾", "👩🏿‍❤‍👨🏾", "👩🏿‍❤️‍👨🏿", "👩🏿‍❤‍👨🏿", "👨‍❤️‍👨", "👨‍❤‍👨", "👨🏻‍❤️‍👨🏻", "👨🏻‍❤‍👨🏻", "👨🏻‍❤️‍👨🏼", "👨🏻‍❤‍👨🏼", "👨🏻‍❤️‍👨🏽", "👨🏻‍❤‍👨🏽", "👨🏻‍❤️‍👨🏾", "👨🏻‍❤‍👨🏾", "👨🏻‍❤️‍👨🏿", "👨🏻‍❤‍👨🏿", "👨🏼‍❤️‍👨🏻", "👨🏼‍❤‍👨🏻", "👨🏼‍❤️‍👨🏼", "👨🏼‍❤‍👨🏼", "👨🏼‍❤️‍👨🏽", "👨🏼‍❤‍👨🏽", "👨🏼‍❤️‍👨🏾", "👨🏼‍❤‍👨🏾", "👨🏼‍❤️‍👨🏿", "👨🏼‍❤‍👨🏿", "👨🏽‍❤️‍👨🏻", "👨🏽‍❤‍👨🏻", "👨🏽‍❤️‍👨🏼", "👨🏽‍❤‍👨🏼", "👨🏽‍❤️‍👨🏽", "👨🏽‍❤‍👨🏽", "👨🏽‍❤️‍👨🏾", "👨🏽‍❤‍👨🏾", "👨🏽‍❤️‍👨🏿", "👨🏽‍❤‍👨🏿", "👨🏾‍❤️‍👨🏻", "👨🏾‍❤‍👨🏻", "👨🏾‍❤️‍👨🏼", "👨🏾‍❤‍👨🏼", "👨🏾‍❤️‍👨🏽", "👨🏾‍❤‍👨🏽", "👨🏾‍❤️‍👨🏾", "👨🏾‍❤‍👨🏾", "👨🏾‍❤️‍👨🏿", "👨🏾‍❤‍👨🏿", "👨🏿‍❤️‍👨🏻", "👨🏿‍❤‍👨🏻", "👨🏿‍❤️‍👨🏼", "👨🏿‍❤‍👨🏼", "👨🏿‍❤️‍👨🏽", "👨🏿‍❤‍👨🏽", "👨🏿‍❤️‍👨🏾", "👨🏿‍❤‍👨🏾", "👨🏿‍❤️‍👨🏿", "👨🏿‍❤‍👨🏿", "👩‍❤️‍👩", "👩‍❤‍👩", "👩🏻‍❤️‍👩🏻", "👩🏻‍❤‍👩🏻", "👩🏻‍❤️‍👩🏼", "👩🏻‍❤‍👩🏼", "👩🏻‍❤️‍👩🏽", "👩🏻‍❤‍👩🏽", "👩🏻‍❤️‍👩🏾", "👩🏻‍❤‍👩🏾", "👩🏻‍❤️‍👩🏿", "👩🏻‍❤‍👩🏿", "👩🏼‍❤️‍👩🏻", "👩🏼‍❤‍👩🏻", "👩🏼‍❤️‍👩🏼", "👩🏼‍❤‍👩🏼", "👩🏼‍❤️‍👩🏽", "👩🏼‍❤‍👩🏽", "👩🏼‍❤️‍👩🏾", "👩🏼‍❤‍👩🏾", "👩🏼‍❤️‍👩🏿", "👩🏼‍❤‍👩🏿", "👩🏽‍❤️‍👩🏻", "👩🏽‍❤‍👩🏻", "👩🏽‍❤️‍👩🏼", "👩🏽‍❤‍👩🏼", "👩🏽‍❤️‍👩🏽", "👩🏽‍❤‍👩🏽", "👩🏽‍❤️‍👩🏾", "👩🏽‍❤‍👩🏾", "👩🏽‍❤️‍👩🏿", "👩🏽‍❤‍👩🏿", "👩🏾‍❤️‍👩🏻", "👩🏾‍❤‍👩🏻", "👩🏾‍❤️‍👩🏼", "👩🏾‍❤‍👩🏼", "👩🏾‍❤️‍👩🏽", "👩🏾‍❤‍👩🏽", "👩🏾‍❤️‍👩🏾", "👩🏾‍❤‍👩🏾", "👩🏾‍❤️‍👩🏿", "👩🏾‍❤‍👩🏿", "👩🏿‍❤️‍👩🏻", "👩🏿‍❤‍👩🏻", "👩🏿‍❤️‍👩🏼", "👩🏿‍❤‍👩🏼", "👩🏿‍❤️‍👩🏽", "👩🏿‍❤‍👩🏽", "👩🏿‍❤️‍👩🏾", "👩🏿‍❤‍👩🏾", "👩🏿‍❤️‍👩🏿", "👩🏿‍❤‍👩🏿", "👪", "👨‍👩‍👦", "👨‍👩‍👧", "👨‍👩‍👧‍👦", "👨‍👩‍👦‍👦", "👨‍👩‍👧‍👧", "👨‍👨‍👦", "👨‍👨‍👧", "👨‍👨‍👧‍👦", "👨‍👨‍👦‍👦", "👨‍👨‍👧‍👧", "👩‍👩‍👦", "👩‍👩‍👧", "👩‍👩‍👧‍👦", "👩‍👩‍👦‍👦", "👩‍👩‍👧‍👧", "👨‍👦", "👨‍👦‍👦", "👨‍👧", "👨‍👧‍👦", "👨‍👧‍👧", "👩‍👦", "👩‍👦‍👦", "👩‍👧", "👩‍👧‍👦", "👩‍👧‍👧", "🗣️", "🗣", "👤", "👥", "🫂", "👣", "🐵", "🐒", "🦍", "🦧", "🐶", "🐕", "🦮", "🐕‍🦺", "🐩", "🐺", "🦊", "🦝", "🐱", "🐈", "🐈‍⬛", "🦁", "🐯", "🐅", "🐆", "🐴", "🫎", "🫏", "🐎", "🦄", "🦓", "🦌", "🦬", "🐮", "🐂", "🐃", "🐄", "🐷", "🐖", "🐗", "🐽", "🐏", "🐑", "🐐", "🐪", "🐫", "🦙", "🦒", "🐘", "🦣", "🦏", "🦛", "🐭", "🐁", "🐀", "🐹", "🐰", "🐇", "🐿️", "🐿", "🦫", "🦔", "🦇", "🐻", "🐻‍❄️", "🐻‍❄", "🐨", "🐼", "🦥", "🦦", "🦨", "🦘", "🦡", "🐾", "🦃", "🐔", "🐓", "🐣", "🐤", "🐥", "🐦", "🐧", "🕊️", "🕊", "🦅", "🦆", "🦢", "🦉", "🦤", "🪶", "🦩", "🦚", "🦜", "🪽", "🐦‍⬛", "🪿", "🐸", "🐊", "🐢", "🦎", "🐍", "🐲", "🐉", "🦕", "🦖", "🐳", "🐋", "🐬", "🦭", "🐟", "🐠", "🐡", "🦈", "🐙", "🐚", "🪸", "🪼", "🐌", "🦋", "🐛", "🐜", "🐝", "🪲", "🐞", "🦗", "🪳", "🕷️", "🕷", "🕸️", "🕸", "🦂", "🦟", "🪰", "🪱", "🦠", "💐", "🌸", "💮", "🪷", "🏵️", "🏵", "🌹", "🥀", "🌺", "🌻", "🌼", "🌷", "🪻", "🌱", "🪴", "🌲", "🌳", "🌴", "🌵", "🌾", "🌿", "☘️", "☘", "🍀", "🍁", "🍂", "🍃", "🪹", "🪺", "🍄", "🍇", "🍈", "🍉", "🍊", "🍋", "🍌", "🍍", "🥭", "🍎", "🍏", "🍐", "🍑", "🍒", "🍓", "🫐", "🥝", "🍅", "🫒", "🥥", "🥑", "🍆", "🥔", "🥕", "🌽", "🌶️", "🌶", "🫑", "🥒", "🥬", "🥦", "🧄", "🧅", "🥜", "🫘", "🌰", "🫚", "🫛", "🍞", "🥐", "🥖", "🫓", "🥨", "🥯", "🥞", "🧇", "🧀", "🍖", "🍗", "🥩", "🥓", "🍔", "🍟", "🍕", "🌭", "🥪", "🌮", "🌯", "🫔", "🥙", "🧆", "🥚", "🍳", "🥘", "🍲", "🫕", "🥣", "🥗", "🍿", "🧈", "🧂", "🥫", "🍱", "🍘", "🍙", "🍚", "🍛", "🍜", "🍝", "🍠", "🍢", "🍣", "🍤", "🍥", "🥮", "🍡", "🥟", "🥠", "🥡", "🦀", "🦞", "🦐", "🦑", "🦪", "🍦", "🍧", "🍨", "🍩", "🍪", "🎂", "🍰", "🧁", "🥧", "🍫", "🍬", "🍭", "🍮", "🍯", "🍼", "🥛", "☕", "🫖", "🍵", "🍶", "🍾", "🍷", "🍸", "🍹", "🍺", "🍻", "🥂", "🥃", "🫗", "🥤", "🧋", "🧃", "🧉", "🧊", "🥢", "🍽️", "🍽", "🍴", "🥄", "🔪", "🫙", "🏺", "🌍", "🌎", "🌏", "🌐", "🗺️", "🗺", "🗾", "🧭", "🏔️", "🏔", "⛰️", "⛰", "🌋", "🗻", "🏕️", "🏕", "🏖️", "🏖", "🏜️", "🏜", "🏝️", "🏝", "🏞️", "🏞", "🏟️", "🏟", "🏛️", "🏛", "🏗️", "🏗", "🧱", "🪨", "🪵", "🛖", "🏘️", "🏘", "🏚️", "🏚", "🏠", "🏡", "🏢", "🏣", "🏤", "🏥", "🏦", "🏨", "🏩", "🏪", "🏫", "🏬", "🏭", "🏯", "🏰", "💒", "🗼", "🗽", "⛪", "🕌", "🛕", "🕍", "⛩️", "⛩", "🕋", "⛲", "⛺", "🌁", "🌃", "🏙️", "🏙", "🌄", "🌅", "🌆", "🌇", "🌉", "♨️", "♨", "🎠", "🛝", "🎡", "🎢", "💈", "🎪", "🚂", "🚃", "🚄", "🚅", "🚆", "🚇", "🚈", "🚉", "🚊", "🚝", "🚞", "🚋", "🚌", "🚍", "🚎", "🚐", "🚑", "🚒", "🚓", "🚔", "🚕", "🚖", "🚗", "🚘", "🚙", "🛻", "🚚", "🚛", "🚜", "🏎️", "🏎", "🏍️", "🏍", "🛵", "🦽", "🦼", "🛺", "🚲", "🛴", "🛹", "🛼", "🚏", "🛣️", "🛣", "🛤️", "🛤", "🛢️", "🛢", "⛽", "🛞", "🚨", "🚥", "🚦", "🛑", "🚧", "⚓", "🛟", "⛵", "🛶", "🚤", "🛳️", "🛳", "⛴️", "⛴", "🛥️", "🛥", "🚢", "✈️", "✈", "🛩️", "🛩", "🛫", "🛬", "🪂", "💺", "🚁", "🚟", "🚠", "🚡", "🛰️", "🛰", "🚀", "🛸", "🛎️", "🛎", "🧳", "⌛", "⏳", "⌚", "⏰", "⏱️", "⏱", "⏲️", "⏲", "🕰️", "🕰", "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕡", "🕖", "🕢", "🕗", "🕣", "🕘", "🕤", "🕙", "🕥", "🕚", "🕦", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌙", "🌚", "🌛", "🌜", "🌡️", "🌡", "☀️", "☀", "🌝", "🌞", "🪐", "⭐", "🌟", "🌠", "🌌", "☁️", "☁", "⛅", "⛈️", "⛈", "🌤️", "🌤", "🌥️", "🌥", "🌦️", "🌦", "🌧️", "🌧", "🌨️", "🌨", "🌩️", "🌩", "🌪️", "🌪", "🌫️", "🌫", "🌬️", "🌬", "🌀", "🌈", "🌂", "☂️", "☂", "☔", "⛱️", "⛱", "⚡", "❄️", "❄", "☃️", "☃", "⛄", "☄️", "☄", "🔥", "💧", "🌊", "🎃", "🎄", "🎆", "🎇", "🧨", "✨", "🎈", "🎉", "🎊", "🎋", "🎍", "🎎", "🎏", "🎐", "🎑", "🧧", "🎀", "🎁", "🎗️", "🎗", "🎟️", "🎟", "🎫", "🎖️", "🎖", "🏆", "🏅", "🥇", "🥈", "🥉", "⚽", "⚾", "🥎", "🏀", "🏐", "🏈", "🏉", "🎾", "🥏", "🎳", "🏏", "🏑", "🏒", "🥍", "🏓", "🏸", "🥊", "🥋", "🥅", "⛳", "⛸️", "⛸", "🎣", "🤿", "🎽", "🎿", "🛷", "🥌", "🎯", "🪀", "🪁", "🔫", "🎱", "🔮", "🪄", "🎮", "🕹️", "🕹", "🎰", "🎲", "🧩", "🧸", "🪅", "🪩", "🪆", "♠️", "♠", "♥️", "♥", "♦️", "♦", "♣️", "♣", "♟️", "♟", "🃏", "🀄", "🎴", "🎭", "🖼️", "🖼", "🎨", "🧵", "🪡", "🧶", "🪢", "👓", "🕶️", "🕶", "🥽", "🥼", "🦺", "👔", "👕", "👖", "🧣", "🧤", "🧥", "🧦", "👗", "👘", "🥻", "🩱", "🩲", "🩳", "👙", "👚", "🪭", "👛", "👜", "👝", "🛍️", "🛍", "🎒", "🩴", "👞", "👟", "🥾", "🥿", "👠", "👡", "🩰", "👢", "🪮", "👑", "👒", "🎩", "🎓", "🧢", "🪖", "⛑️", "⛑", "📿", "💄", "💍", "💎", "🔇", "🔈", "🔉", "🔊", "📢", "📣", "📯", "🔔", "🔕", "🎼", "🎵", "🎶", "🎙️", "🎙", "🎚️", "🎚", "🎛️", "🎛", "🎤", "🎧", "📻", "🎷", "🪗", "🎸", "🎹", "🎺", "🎻", "🪕", "🥁", "🪘", "🪇", "🪈", "📱", "📲", "☎️", "☎", "📞", "📟", "📠", "🔋", "🪫", "🔌", "💻", "🖥️", "🖥", "🖨️", "🖨", "⌨️", "⌨", "🖱️", "🖱", "🖲️", "🖲", "💽", "💾", "💿", "📀", "🧮", "🎥", "🎞️", "🎞", "📽️", "📽", "🎬", "📺", "📷", "📸", "📹", "📼", "🔍", "🔎", "🕯️", "🕯", "💡", "🔦", "🏮", "🪔", "📔", "📕", "📖", "📗", "📘", "📙", "📚", "📓", "📒", "📃", "📜", "📄", "📰", "🗞️", "🗞", "📑", "🔖", "🏷️", "🏷", "💰", "🪙", "💴", "💵", "💶", "💷", "💸", "💳", "🧾", "💹", "✉️", "✉", "📧", "📨", "📩", "📤", "📥", "📦", "📫", "📪", "📬", "📭", "📮", "🗳️", "🗳", "✏️", "✏", "✒️", "✒", "🖋️", "🖋", "🖊️", "🖊", "🖌️", "🖌", "🖍️", "🖍", "📝", "💼", "📁", "📂", "🗂️", "🗂", "📅", "📆", "🗒️", "🗒", "🗓️", "🗓", "📇", "📈", "📉", "📊", "📋", "📌", "📍", "📎", "🖇️", "🖇", "📏", "📐", "✂️", "✂", "🗃️", "🗃", "🗄️", "🗄", "🗑️", "🗑", "🔒", "🔓", "🔏", "🔐", "🔑", "🗝️", "🗝", "🔨", "🪓", "⛏️", "⛏", "⚒️", "⚒", "🛠️", "🛠", "🗡️", "🗡", "⚔️", "⚔", "💣", "🪃", "🏹", "🛡️", "🛡", "🪚", "🔧", "🪛", "🔩", "⚙️", "⚙", "🗜️", "🗜", "⚖️", "⚖", "🦯", "🔗", "⛓️", "⛓", "🪝", "🧰", "🧲", "🪜", "⚗️", "⚗", "🧪", "🧫", "🧬", "🔬", "🔭", "📡", "💉", "🩸", "💊", "🩹", "🩼", "🩺", "🩻", "🚪", "🛗", "🪞", "🪟", "🛏️", "🛏", "🛋️", "🛋", "🪑", "🚽", "🪠", "🚿", "🛁", "🪤", "🪒", "🧴", "🧷", "🧹", "🧺", "🧻", "🪣", "🧼", "🫧", "🪥", "🧽", "🧯", "🛒", "🚬", "⚰️", "⚰", "🪦", "⚱️", "⚱", "🧿", "🪬", "🗿", "🪧", "🪪", "🏧", "🚮", "🚰", "♿", "🚹", "🚺", "🚻", "🚼", "🚾", "🛂", "🛃", "🛄", "🛅", "⚠️", "⚠", "🚸", "⛔", "🚫", "🚳", "🚭", "🚯", "🚱", "🚷", "📵", "🔞", "☢️", "☢", "☣️", "☣", "⬆️", "⬆", "↗️", "↗", "➡️", "➡", "↘️", "↘", "⬇️", "⬇", "↙️", "↙", "⬅️", "⬅", "↖️", "↖", "↕️", "↕", "↔️", "↔", "↩️", "↩", "↪️", "↪", "⤴️", "⤴", "⤵️", "⤵", "🔃", "🔄", "🔙", "🔚", "🔛", "🔜", "🔝", "🛐", "⚛️", "⚛", "🕉️", "🕉", "✡️", "✡", "☸️", "☸", "☯️", "☯", "✝️", "✝", "☦️", "☦", "☪️", "☪", "☮️", "☮", "🕎", "🔯", "🪯", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "⛎", "🔀", "🔁", "🔂", "▶️", "▶", "⏩", "⏭️", "⏭", "⏯️", "⏯", "◀️", "◀", "⏪", "⏮️", "⏮", "🔼", "⏫", "🔽", "⏬", "⏸️", "⏸", "⏹️", "⏹", "⏺️", "⏺", "⏏️", "⏏", "🎦", "🔅", "🔆", "📶", "🛜", "📳", "📴", "♀️", "♀", "♂️", "♂", "⚧️", "⚧", "✖️", "✖", "➕", "➖", "➗", "🟰", "♾️", "♾", "‼️", "‼", "⁉️", "⁉", "❓", "❔", "❕", "❗", "〰️", "〰", "💱", "💲", "⚕️", "⚕", "♻️", "♻", "⚜️", "⚜", "🔱", "📛", "🔰", "⭕", "✅", "☑️", "☑", "✔️", "✔", "❌", "❎", "➰", "➿", "〽️", "〽", "✳️", "✳", "✴️", "✴", "❇️", "❇", "©️", "©", "®️", "®", "™️", "™", "#️⃣", "#⃣", "*️⃣", "*⃣", "0️⃣", "0⃣", "1️⃣", "1⃣", "2️⃣", "2⃣", "3️⃣", "3⃣", "4️⃣", "4⃣", "5️⃣", "5⃣", "6️⃣", "6⃣", "7️⃣", "7⃣", "8️⃣", "8⃣", "9️⃣", "9⃣", "🔟", "🔠", "🔡", "🔢", "🔣", "🔤", "🅰️", "🅰", "🆎", "🅱️", "🅱", "🆑", "🆒", "🆓", "ℹ️", "ℹ", "🆔", "Ⓜ️", "Ⓜ", "🆕", "🆖", "🅾️", "🅾", "🆗", "🅿️", "🅿", "🆘", "🆙", "🆚", "🈁", "🈂️", "🈂", "🈷️", "🈷", "🈶", "🈯", "🉐", "🈹", "🈚", "🈲", "🉑", "🈸", "🈴", "🈳", "㊗️", "㊗", "㊙️", "㊙", "🈺", "🈵", "🔴", "🟠", "🟡", "🟢", "🔵", "🟣", "🟤", "⚫", "⚪", "🟥", "🟧", "🟨", "🟩", "🟦", "🟪", "🟫", "⬛", "⬜", "◼️", "◼", "◻️", "◻", "◾", "◽", "▪️", "▪", "▫️", "▫", "🔶", "🔷", "🔸", "🔹", "🔺", "🔻", "💠", "🔘", "🔳", "🔲", "🏁", "🚩", "🎌", "🏴", "🏳️", "🏳", "🏳️‍🌈", "🏳‍🌈", "🏳️‍⚧️", "🏳‍⚧️", "🏳️‍⚧", "🏳‍⚧", "🏴‍☠️", "🏴‍☠", "🇦🇨", "🇦🇩", "🇦🇪", "🇦🇫", "🇦🇬", "🇦🇮", "🇦🇱", "🇦🇲", "🇦🇴", "🇦🇶", "🇦🇷", "🇦🇸", "🇦🇹", "🇦🇺", "🇦🇼", "🇦🇽", "🇦🇿", "🇧🇦", "🇧🇧", "🇧🇩", "🇧🇪", "🇧🇫", "🇧🇬", "🇧🇭", "🇧🇮", "🇧🇯", "🇧🇱", "🇧🇲", "🇧🇳", "🇧🇴", "🇧🇶", "🇧🇷", "🇧🇸", "🇧🇹", "🇧🇻", "🇧🇼", "🇧🇾", "🇧🇿", "🇨🇦", "🇨🇨", "🇨🇩", "🇨🇫", "🇨🇬", "🇨🇭", "🇨🇮", "🇨🇰", "🇨🇱", "🇨🇲", "🇨🇳", "🇨🇴", "🇨🇵", "🇨🇷", "🇨🇺", "🇨🇻", "🇨🇼", "🇨🇽", "🇨🇾", "🇨🇿", "🇩🇪", "🇩🇬", "🇩🇯", "🇩🇰", "🇩🇲", "🇩🇴", "🇩🇿", "🇪🇦", "🇪🇨", "🇪🇪", "🇪🇬", "🇪🇭", "🇪🇷", "🇪🇸", "🇪🇹", "🇪🇺", "🇫🇮", "🇫🇯", "🇫🇰", "🇫🇲", "🇫🇴", "🇫🇷", "🇬🇦", "🇬🇧", "🇬🇩", "🇬🇪", "🇬🇫", "🇬🇬", "🇬🇭", "🇬🇮", "🇬🇱", "🇬🇲", "🇬🇳", "🇬🇵", "🇬🇶", "🇬🇷", "🇬🇸", "🇬🇹", "🇬🇺", "🇬🇼", "🇬🇾", "🇭🇰", "🇭🇲", "🇭🇳", "🇭🇷", "🇭🇹", "🇭🇺", "🇮🇨", "🇮🇩", "🇮🇪", "🇮🇱", "🇮🇲", "🇮🇳", "🇮🇴", "🇮🇶", "🇮🇷", "🇮🇸", "🇮🇹", "🇯🇪", "🇯🇲", "🇯🇴", "🇯🇵", "🇰🇪", "🇰🇬", "🇰🇭", "🇰🇮", "🇰🇲", "🇰🇳", "🇰🇵", "🇰🇷", "🇰🇼", "🇰🇾", "🇰🇿", "🇱🇦", "🇱🇧", "🇱🇨", "🇱🇮", "🇱🇰", "🇱🇷", "🇱🇸", "🇱🇹", "🇱🇺", "🇱🇻", "🇱🇾", "🇲🇦", "🇲🇨", "🇲🇩", "🇲🇪", "🇲🇫", "🇲🇬", "🇲🇭", "🇲🇰", "🇲🇱", "🇲🇲", "🇲🇳", "🇲🇴", "🇲🇵", "🇲🇶", "🇲🇷", "🇲🇸", "🇲🇹", "🇲🇺", "🇲🇻", "🇲🇼", "🇲🇽", "🇲🇾", "🇲🇿", "🇳🇦", "🇳🇨", "🇳🇪", "🇳🇫", "🇳🇬", "🇳🇮", "🇳🇱", "🇳🇴", "🇳🇵", "🇳🇷", "🇳🇺", "🇳🇿", "🇴🇲", "🇵🇦", "🇵🇪", "🇵🇫", "🇵🇬", "🇵🇭", "🇵🇰", "🇵🇱", "🇵🇲", "🇵🇳", "🇵🇷", "🇵🇸", "🇵🇹", "🇵🇼", "🇵🇾", "🇶🇦", "🇷🇪", "🇷🇴", "🇷🇸", "🇷🇺", "🇷🇼", "🇸🇦", "🇸🇧", "🇸🇨", "🇸🇩", "🇸🇪", "🇸🇬", "🇸🇭", "🇸🇮", "🇸🇯", "🇸🇰", "🇸🇱", "🇸🇲", "🇸🇳", "🇸🇴", "🇸🇷", "🇸🇸", "🇸🇹", "🇸🇻", "🇸🇽", "🇸🇾", "🇸🇿", "🇹🇦", "🇹🇨", "🇹🇩", "🇹🇫", "🇹🇬", "🇹🇭", "🇹🇯", "🇹🇰", "🇹🇱", "🇹🇲", "🇹🇳", "🇹🇴", "🇹🇷", "🇹🇹", "🇹🇻", "🇹🇼", "🇹🇿", "🇺🇦", "🇺🇬", "🇺🇲", "🇺🇳", "🇺🇸", "🇺🇾", "🇺🇿", "🇻🇦", "🇻🇨", "🇻🇪", "🇻🇬", "🇻🇮", "🇻🇳", "🇻🇺", "🇼🇫", "🇼🇸", "🇽🇰", "🇾🇪", "🇾🇹", "🇿🇦", "🇿🇲", "🇿🇼", "🏴󠁧󠁢󠁥󠁮󠁧󠁿", "🏴󠁧󠁢󠁳󠁣󠁴󠁿", "🏴󠁧󠁢󠁷󠁬󠁳󠁿"];
    return totalPack;
}

/**
 * Generates a random key by encrypting a random message with random keys.
 * @returns {string} The encrypted key string.
 */
async function generateRandomKey() {
    let keys = {};

    keys.aesKey1 = await generate256BitKey(new Uint8Array([0,1,2,3,4,5,6,7,8]));
    keys.aesKey2 = await generate256BitKey(new Uint8Array([0,1,2,4,8,16,32,64,128]));
    keys.xorKey = await generate256BitKey(new Uint8Array([10,20,40,20,10,20,40,20,10]));

    let message = generateRandomString();

    let keyString = await encrypt(message, keys);

    return keyString;
}

/**
 * Checks if the input string is an encoded emoji string.
 * @param {string} inputString - The input string to check.
 * @returns {string|boolean} Returns 'emoji' if it's an encoded emoji string, otherwise false.
 */
function checkInputString(inputString) {
    if (inputString === "") {
        console.log("Input is empty");
        return false;
    }

    // Count the number of zero-width spaces (used as separators)
    if ((inputString.split('​').length - 1) > 2) {
        console.log("Input is Encoded Emoji");
        return "emoji";
    }
    return false;
}
